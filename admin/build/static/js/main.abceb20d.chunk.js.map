{"version":3,"sources":["utils/localStorage.js","routes/userRoutes.js","store/actionTypes/authConstants.js","store/actions/authActions.js","routes/cartRoutes.js","store/actionTypes/cartConstants.js","store/actions/cartActions.js","components/navbar/Navbar.jsx","components/layout/Loading.jsx","components/auth/Signup.jsx","components/auth/Login.jsx","routes/orderRoutes.js","store/actionTypes/orderConstants.js","store/actions/orderActions.js","utils/getDateString.js","components/auth/Profile.jsx","components/auth/Logout.jsx","components/cart/ImageMagnifier.jsx","components/auth/Allusersrecord.jsx","components/auth/Allusers.jsx","components/Message.jsx","components/auth/Confirmuser.jsx","components/auth/Useredit.jsx","routes/productRoutes.js","store/actionTypes/productConstants.js","components/products/Createproducts.jsx","store/actions/productActions.js","components/products/Productrecords.jsx","components/products/Listproducts.jsx","components/Home.jsx","components/Modals.jsx","components/cart/Productrecords.jsx","components/cart/Productlisting.jsx","components/cart/Producttocarts.jsx","components/cart/Cartpage.jsx","components/cart/CheckoutStatus.jsx","components/cart/Shipping.jsx","components/cart/Payment.jsx","components/cart/Placeorder.jsx","components/cart/Orderlistpage.jsx","components/cart/CheckoutForm.jsx","components/cart/Orderproduct.jsx","routes/PrivateRoute.js","routes/PublicRoute.js","App.js","reportWebVitals.js","store/store.js","store/reducers/authReducers.js","store/reducers/productReducers.js","store/reducers/cartReducers.js","store/reducers/orderReducers.js","index.js"],"names":["getAPIUrlProducts","getAPIUrlCarts","getAPIUrlOrders","getToken","userInfos","localStorage","getItem","userToken","JSON","parse","access_token","setUser","user_logged","setItem","stringify","getUser","userInfo","isUserLoggedIn","http","axios","create","baseURL","URL","defaults","withCredentials","login","data","post","logout","get","addUser","config","headers","Authorization","allUsers","id","searchUsers","loggedUserId","usersProfileByid","updateUsersProfileById","put","editUserFromAdminById","deleteUser","delete","confirmUser","token","validateCaptcha","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_ALL_REQUEST","USER_ALL_SUCCESS","USER_ALL_FAIL","USER_GETUSERBYSEARCH_REQUEST","USER_GETUSERBYSEARCH_SUCCESS","USER_GETUSERBYSEARCH_FAIL","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_GET_DETAILS_REQUEST","USER_GET_DETAILS_SUCCESS","USER_GET_DETAILS_FAIL","USER_CONFIRM_REQUEST","USER_CONFIRM_SUCCESS","USER_CONFIRM_FAIL","EDIT_USER_FROM_ADMIN_FAIL","EDIT_USER_FROM_ADMIN_REQUEST","EDIT_USER_FROM_ADMIN_SUCCESS","loginUser","postbody","dispatch","type","then","response","payload","status","toast","success","position","hideProgressBar","progress","undefined","error","document","getElementById","innerText","disabled","catch","message","registerUser","postBody","getUserDetails","listProduct","productCartById","CART_PORDUCTTO_CART_REQEUST","CART_PORDUCTTO_CART_SUCCESS","CART_PORDUCTTO_CART_FAIL","CART_LIST_REQEUST","CART_LIST_SUCCESS","CART_LIST_FAIL","CART_PAGE_REQEUST","CART_PAGE_SUCCESS","CART_PAGE_FAIL","CART_ADD_ITEM","CART_REMOVE_ITEM","CART_SAVE_SHIPPING_ADDRESS","CART_SAVE_PAYMENT_METHOD","CART_RESET","addItem","qty","getState","_id","name","image","rate","numberOfItem","cart","cartInfo","console","removeItem","log","savePaymentMethod","Navbar","navigate","useNavigate","useDispatch","useState","setName","isAdmin","setIsAdmin","updateId","setUpdateId","imageLoggedInUrl","setImageLoggedInUrl","useSelector","state","userLogin","userId","setUserid","itemCount","setItemCount","cartId","setCartId","onLogout","e","clear","maessage","useEffect","reduce","acc","item","products","productInfos","getProduct","saved","initialValue","url","Box","sx","flexGrow","AppBar","Toolbar","Typography","variant","Tabs","to","style","fontSize","color","className","reloadDocument","popupId","popupState","Fragment","Button","bindTrigger","Menu","bindMenu","MenuItem","onClick","close","textDecoration","src","alt","href","Tabs3","class","Tabs2","styled","NavLink","Loading","width","margin","display","size","Signup","showPassword","values","setValues","showRePassword","valuesRe","setValuesRe","setImage","captchaRef","useRef","userRegister","loading","schema","Yup","required","min","max","occupation","email","password","matches","repassword","when","is","val","length","oneOf","phone","description","age","gender","nullable","test","value","recaptcha","formik","useFormik","initialValues","validationSchema","onSubmit","resetForm","onRegister","TransformFileData","file","reader","FileReader","fileType","readAsDataURL","onloadend","result","current","getValue","reset","resp","Container","Avatar","alignItems","bgcolor","deepOrange","textAlign","Ptags","FormControl","TextField","label","onChange","handleChange","inputProps","maxLength","touched","Boolean","errors","helperText","Spanning","InputProps","endAdornment","InputAdornment","IconButton","edge","onInput","target","Math","parseInt","toString","slice","multiline","rows","InputLabel","Select","Spannings","FormLabel","RadioGroup","row","setFieldValue","currentTarget","FormControlLabel","control","Radio","ImageList","accept","files","handleProductImageUpload","setTouched","ImagePreview","sitekey","process","theme","ref","Buttons","handleSubmit","FormGroup","ImageListItem","Login","onAdminLogin","createOrder","order","listAllOrder","pageNumber","getOrderDetail","orderID","payOrder","paymentResult","deliverOrder","listMyOrder","stripeRequest","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_CREATE_RESET","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","ORDER_PAY_RESET","ORDER_DELIVER_REQUEST","ORDER_DELIVER_SUCCESS","ORDER_DELIVER_FAIL","ORDER_DELIVER_RESET","ORDER_ALL_LIST_REQUEST","ORDER_ALL_LIST_SUCCESS","ORDER_ALL_LIST_FAIL","ORDER_MY_LIST_REQUEST","ORDER_MY_LIST_SUCCESS","ORDER_MY_LIST_FAIL","ORDER_MY_LIST_RESET","payOrders","getDateString","date","showTime","options","year","month","day","timeStr","Date","toLocaleTimeString","timeStyle","hour12","timeZone","toLocaleDateString","Profile","Item","Paper","backgroundColor","palette","mode","typography","body2","padding","spacing","text","secondary","setOccupation","setEmail","setPhone","setDescription","setGender","setAge","setIsadmin","imagePreview","setImagePreview","spinner","setSpinner","dataPage","page","setPage","rowsPerPage","setRowsPerPage","useParams","userUpdateProfile","orderListMy","orderLoading","orderError","orders","count","savedValues","enableReinitialize","onUpdateProfile","profile","updateUser","Containers","container","xs","FormContainer","isConfirmed","opacity","pointerEvents","Stack","Alert","severity","Row","Col","dismissible","duration","Table","striped","bordered","responsive","map","totalPrice","toLocaleString","maximumFractionDigits","currency","createdAt","isPaid","paidAt","isDelivered","deliveredAt","justifyContent","TablePagination","rowsPerPageOptions","component","onPageChange","event","newPage","onRowsPerPageChange","Logout","ImageMagnifier","title","height","magnifierHeight","magnifieWidth","zoomLevel","x","y","setXY","imgWidth","imgHeight","setSize","showMagnifier","setShowMagnifier","Image","fluid","onMouseEnter","getBoundingClientRect","onMouseMove","top","left","pageX","window","pageXOffset","pageY","pageYOffset","onMouseLeave","border","backgroundImage","backgroundRepeat","borderRadius","backgroundSize","backgroundPositionX","backgroundPositionY","Allusersrecord","deleteuser","confirm","targetSet","closest","remove","deleteUsers","Allusers","listContent","searchNav","setSearch","setLoggedUserId","userAll","userInfoBySearch","userSearch","users","setUsers","loggedUser","usersAll","colSpan","stud","placeholder","marginLeft","marginTop","userSearchs","searchValue","preventDefault","clearSearch","Message","children","visible","setVisible","setTimeout","onClose","defaultProps","Confirmuser","userConfirm","isLoggedIn","setIsLoggedIn","emailToken","alreadyLoggedIn","confirmUsers","imgToShow","Useredit","editUserFromAdmin","userInfoById","userDetails","editUserFromAdminByIds","Checkbox","checked","createProduct","PRODUCT_CREATE_REQEUST","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAIL","PRODUCT_LIST_REQEUST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","Listproducts","productInfo","isPurchased","setIsPurchased","ratings","resetFor","submitProduct","createProducts","defaultValue","Productrecords","Productrecord","deleteproduct","Home","savedUser","setInterval","Divider","charAt","toUpperCase","moment","format","customStyles","content","right","bottom","marginRight","transform","Modals","subtitle","React","modalIsOpen","setIsOpen","closeModal","isOpen","onAfterOpen","onRequestClose","contentLabel","_subtitle","Card","Title","Rating","precision","newValue","Productlisting","productListingsCart","promptVerfication","setPromptVerification","product","i","sm","md","lg","xl","Producttocarts","productToCart","quantity","setQuantity","setValue","productByIdToCart","ListGroup","Array","keys","CartPage","totalItems","setTotalItems","productID","location","search","Number","split","handleRemoveFromCart","rounded","ButtonGroup","outline","borderRight","borderLeft","Link","CheckoutStatus","step1","step2","step3","step4","Nav","background","Shipping","history","shippingAddress","address","city","postalcode","country","shippingSubmit","vals","PaymentPage","paymentMethod","setPaymentMethod","Placeorder","orderCreate","sessionStorage","shippingPrice","taxPrice","idx","price","createOrders","orderItems","itemsPrice","ProductListPage","orderListAll","user","CheckoutForm","itemQWithIds","setError","clientSecret","setClientSecret","stripe","useStripe","elements","useElements","getClientSecret","makePayment","confirmCardPayment","payment_method","card","getElement","CardElement","billing_details","paymentIntent","itemQWithId","paymentMode","reload","Form","Group","base","invalid","Orderproduct","stripePromise","loadStripe","setErrors","orderDetails","orderPay","loadingPay","successPay","orderDeliver","loadingDeliver","successDeliver","itemQ","push","getOrderDetails","Spannings2","intent","shape","actions","purchase_units","amount","toFixed","application_context","shipping_preference","onApprove","capture","details","successPaymentHandler","onError","err","deliverOrders","PrivateRoute","PublicRoutes","App","exact","path","element","PublicRoute","Createproducts","Cartpage","Payment","Orderlistpage","autoClose","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","userDelete","existingItem","find","ele","filter","cartPage","userInfoFromStorage","cartInfoFromStorage","shippingAddressFromLocalStorage","initialState","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.abceb20d.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst URL = 'http://localhost:8000'; \r\nexport const getUrl = () => {\r\n        return URL;\r\n}\r\nexport const setProduct = (products) => {\r\n        const productInfos = localStorage.setItem(\"cartInfo\",JSON.stringify(products));\r\n        return productInfos;\r\n}\r\nexport const getProduct = () => {\r\n        const productInfos = localStorage.getItem(\"cartInfo\");\r\n        const productValues = JSON.parse(productInfos);\r\n        return productValues;\r\n}\r\nexport const removeProduct = () => {\r\n       localStorage.removeItem(\"cartInfo\");\r\n}\r\nexport const getAPIUrl = () => {\r\n        let URL = `${getUrl()}/api/user`;\r\n        return URL;\r\n\r\n}\r\nexport const getAPIUrlProducts = () => {\r\n        let URL = `${getUrl()}/api/product`;\r\n        return URL;\r\n}\r\nexport const getAPIUrlCarts = () => {\r\n        let URL = `${getUrl()}/api/cart`;\r\n        return URL;\r\n}\r\nexport const getAPIUrlOrders = () => {\r\n        let URL = `${getUrl()}/api/order`;\r\n        return URL;\r\n}\r\nexport const getToken = () => {\r\n        let userInfos = localStorage.getItem('userInfo');\r\n        const userToken = JSON.parse(userInfos);\r\n        if(userToken){\r\n                return userToken.access_token;\r\n        }\r\n}\r\nexport const setUser = (user_logged) =>\r\n{\r\n        const user = localStorage.setItem('userInfo',JSON.stringify(user_logged))\r\n        return user;\r\n}\r\nexport const getUser = () =>\r\n{\r\n        let userInfo = localStorage.getItem('userInfo');\r\n        const user_detail = JSON.parse(userInfo);\r\n        return user_detail;\r\n}\r\nexport const removeUser = () =>\r\n{   \r\n        localStorage.removeItem('userInfo');\r\n        localStorage.clear();\r\n}\r\nexport const isUserLoggedIn = () => {\r\n       // alert(getUser())\r\n      if(getUser()===null)\r\n            return false;     \r\n      else   \r\n            return true;       \r\n}\r\nexport const http = axios.create({\r\n        baseURL:`${getAPIUrl()}`,\r\n    });","import axios from 'axios';\r\nimport {http,getToken} from '../utils/localStorage'\r\nconst URL = 'http://localhost:8000/api/user'; \r\naxios.defaults.withCredentials = true;  \r\n///api of users starts\r\nexport const login = async(data) => {\r\n   return await axios.post(`${URL}/login`,data);\r\n}\r\nexport const logout = async() => {\r\n    return await axios.get(`${URL}/logout`);\r\n}\r\nexport const addUser = async(data) => {\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization : `Bearer ${getToken()}`\r\n        }\r\n    }\r\n    return await axios.post(`${URL}/add-user`,data,config);\r\n}\r\nexport const allUsers = async(id) => {\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization : `Bearer ${getToken()}`\r\n        }\r\n    }\r\n    return await axios.get(`${URL}/allUsers/${id}`,config);\r\n}\r\nexport const searchUsers = async(data,loggedUserId) => {\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization : `Bearer ${getToken()}`\r\n        }\r\n    }\r\n    return await axios.post(`${URL}/searchUsersRecords/${loggedUserId}`,data,config);\r\n}\r\nexport const usersProfileByid = async(id) => {  //all users except logged in user\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization : `Bearer ${getToken()}`\r\n        }\r\n    }\r\n    return await http.get(`${URL}/user-profile/${id}`,config);\r\n}\r\nexport const updateUsersProfileById = async(data,id) => {\r\n\r\n    const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${getToken()}`,\r\n        },\r\n      };\r\n    return await http.put(`${URL}/update-user-profile/${id}`,data,config); //adding token header with request\r\n}\r\nexport const editUserFromAdminById = async(data,id) => {  //all users except logged in user\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization : `Bearer ${getToken()}`\r\n        }\r\n    }\r\n    return await http.put(`${URL}/userEditFromAdminById/${id}`,data,config);\r\n}\r\nexport const deleteUser = async(id) => {\r\n    return await axios.delete(`${URL}/delete/${id}`);\r\n}\r\n\r\nexport const confirmUser = async(token) => {\r\n\r\n    const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n      };\r\n    return await http.get(`${URL}/confirmuser/${token}`,config); //adding token header with request\r\n}  \r\nexport const validateCaptcha = async(token) =>{  //this ruote is only for reCaptcha verification from backend\r\n    return await axios.post(`${URL}/tokenCaptcha`,token);  //sending captcha token to backend to validate\r\n}\r\n///api of users end","export const USER_LOGIN_REQUEST = \"USER_LOGIN_REQUEST\";\r\nexport const USER_LOGIN_SUCCESS = \"USER_LOGIN_SUCCESS\";\r\nexport const USER_LOGIN_FAIL = \"USER_LOGIN_FAIL\";\r\nexport const USER_LOGOUT = \"USER_LOGOUT\";\r\n\r\nexport const USER_REGISTER_REQUEST = \"USER_REGISTER_REQUEST\";\r\nexport const USER_REGISTER_SUCCESS = \"USER_REGISTER_SUCCESS\";\r\nexport const USER_REGISTER_FAIL = \"USER_REGISTER_FAIL\";\r\n\r\nexport const USER_UPDATE_REQUEST = \"USER_UPDATE_REQUEST\";\r\nexport const USER_UPDATE_SUCCESS = \"USER_UPDATE_SUCCESS\";\r\nexport const USER_UPDATE_FAIL = \"USER_UPDATE_FAIL\";\r\n\r\nexport const USER_GET_REQUEST = \"USER_UPDATE_REQUEST\";\r\nexport const USER_GET_SUCCESS = \"USER_UPDATE_SUCCESS\";\r\nexport const USER_GET_FAIL = \"USER_UPDATE_FAIL\";\r\n\r\nexport const USER_ALL_REQUEST = \"USER_UPDATE_REQUEST\";\r\nexport const USER_ALL_SUCCESS = \"USER_UPDATE_SUCCESS\";\r\nexport const USER_ALL_FAIL = \"USER_UPDATE_FAIL\";\r\n\r\nexport const USER_GETUSERBYSEARCH_REQUEST = \"USER_GETUSERBYSEARCH_REQUEST\";\r\nexport const USER_GETUSERBYSEARCH_SUCCESS = \"USER_GETUSERBYSEARCH_SUCCESS\";\r\nexport const USER_GETUSERBYSEARCH_FAIL = \"USER_GETUSERBYSEARCH_FAIL\";\r\n\r\nexport const USER_DELETE_REQUEST = \"USER_DELETE_REQUEST\";\r\nexport const USER_DELETE_SUCCESS = \"USER_DELETE_SUCCESS\";\r\nexport const USER_DELETE_FAIL = \"USER_DELETE_FAIL\";\r\n\r\nexport const USER_GET_DETAILS_REQUEST = \"USER_GET_DETAILS_REQUEST\";\r\nexport const USER_GET_DETAILS_SUCCESS = \"USER_GET_DETAILS_SUCCESS\";\r\nexport const USER_GET_DETAILS_FAIL = \"USER_GET_DETAILS_FAIL\";\r\n\r\nexport const USER_CONFIRM_REQUEST = \"USER_CONFIRM_REQUEST\";\r\nexport const USER_CONFIRM_SUCCESS = \"USER_GET_DETAILS_SUCCESS\";\r\nexport const USER_CONFIRM_FAIL = \"USER_CONFIRM_FAIL\";\r\n\r\nexport const EDIT_USER_FROM_ADMIN_FAIL = \"EDIT_USER_FROM_ADMIN_FAIL\";\r\nexport const EDIT_USER_FROM_ADMIN_REQUEST = \"EDIT_USER_FROM_ADMIN_REQUEST\";\r\nexport const EDIT_USER_FROM_ADMIN_SUCCESS = \"EDIT_USER_FROM_ADMIN_SUCCESS\";\r\n\r\n","import { login,logout,addUser,updateUsersProfileById,editUserFromAdminById,allUsers,usersProfileByid,confirmUser,searchUsers,deleteUser } from \"../../routes/userRoutes\";\r\nimport {setUser,removeUser} from '../../utils/localStorage';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n        USER_LOGIN_FAIL,\r\n        USER_LOGIN_REQUEST,\r\n        USER_LOGIN_SUCCESS,\r\n        USER_LOGOUT,\r\n        USER_REGISTER_FAIL,\r\n        USER_REGISTER_REQUEST,\r\n        USER_REGISTER_SUCCESS,\r\n        USER_UPDATE_FAIL,\r\n        USER_UPDATE_REQUEST,\r\n        USER_UPDATE_SUCCESS,\r\n        EDIT_USER_FROM_ADMIN_FAIL,\r\n        EDIT_USER_FROM_ADMIN_REQUEST,\r\n        EDIT_USER_FROM_ADMIN_SUCCESS,\r\n        USER_ALL_FAIL,\r\n        USER_ALL_REQUEST,\r\n        USER_ALL_SUCCESS,\r\n        USER_GETUSERBYSEARCH_REQUEST,\r\n        USER_GETUSERBYSEARCH_SUCCESS,\r\n        USER_GETUSERBYSEARCH_FAIL,\r\n        USER_DELETE_FAIL,\r\n        USER_DELETE_REQUEST,\r\n        USER_DELETE_SUCCESS,\r\n        USER_GET_DETAILS_REQUEST,    \r\n        USER_GET_DETAILS_SUCCESS, \r\n        USER_GET_DETAILS_FAIL,      \r\n        USER_CONFIRM_REQUEST,\r\n        USER_CONFIRM_SUCCESS,\r\n        USER_CONFIRM_FAIL\r\n      } from \"../actionTypes/authConstants\";\r\n\r\nexport const loginUser = (postbody) => async (dispatch) => {\r\n        //login dispatch\r\n        dispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n                await login(postbody).then(response=>{\r\n                dispatch({ type: USER_LOGIN_SUCCESS, payload: response.data });        \r\n                if(response.status===201 && (response.data!==400 && response.data!==404 ))\r\n                {\r\n                        setUser(response.data);\r\n                        toast.success('User is Logged in Successfully!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                /*swal({\r\n                        title: \"Successful!\",\r\n                        text: 'User Addes Successfully !',\r\n                        icon: \"success\",\r\n                        button: \"OK!\",\r\n                });*/\r\n                }\r\n                else if(response.data===404)\r\n                {\r\n                        dispatch({\r\n                                type: USER_LOGIN_FAIL,\r\n                                payload:\r\n                                'User is not registered with us!' });                        \r\n                        toast.error('User is not registered with us!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });       \r\n                document.getElementById(\"submitting\").innerText = \"Login\";\r\n                document.getElementById(\"submitting\").disabled  = false;\r\n                }\r\n                else if(response.data===400)\r\n                {\r\n                        dispatch({\r\n                                type: USER_LOGIN_FAIL,\r\n                                payload:\r\n                                'Entered Username/Password is wrong!' });\r\n                        toast.error('Entered Username/Password is wrong!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        }); \r\n                document.getElementById(\"submitting\").innerText = \"Login\";\r\n                document.getElementById(\"submitting\").disabled  = false;  \r\n                }\r\n                else\r\n                {\r\n                        dispatch({\r\n                                type: USER_LOGIN_FAIL,\r\n                                payload:\r\n                                response.data });\r\n                        toast.error(response.data, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        }); \r\n                document.getElementById(\"submitting\").innerText = \"Login\";\r\n                document.getElementById(\"submitting\").disabled  = false;                                           \r\n                }\r\n                }).catch(error =>{\r\n                        dispatch({\r\n                                type: USER_LOGIN_FAIL,\r\n                                payload:\r\n                                error.message });\r\n\r\n                        toast.error(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        }); \r\n                document.getElementById(\"submitting\").innerText = \"Login\";\r\n                document.getElementById(\"submitting\").disabled  = false;                                            \r\n                });  \r\n     \r\n};\r\nexport const registerUser = (postBody) => async (dispatch) => {\r\n\r\n        dispatch({ type: USER_REGISTER_REQUEST });\r\n                await addUser(postBody).then(response => {\r\n                dispatch({ type: USER_REGISTER_SUCCESS, payload: response.data });\r\n                if(response.status===201 && response.data!==409)\r\n                {\r\n                        toast.success('User Added Successfully!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                }\r\n                else if(response.data===409)\r\n                { \r\n                        dispatch({\r\n                                type: USER_REGISTER_FAIL,\r\n                                payload:\r\n                                \"Email is already registered with us!\" });\r\n                        toast.error('Email is already registered with us!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });                  \r\n                document.getElementById(\"submitting\").innerText = \"Add User\";\r\n                document.getElementById(\"submitting\").disabled  = false;\r\n                }\r\n                else {\r\n                        dispatch({\r\n                                type: USER_REGISTER_FAIL,\r\n                                payload:\r\n                                response.data });\r\n                        toast.error(response.data, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });                    \r\n                }\r\n                document.getElementById(\"submitting\").innerText = \"Add User\";\r\n                document.getElementById(\"submitting\").disabled  = false;\r\n            }).catch((error) => {\r\n                        dispatch({\r\n                                type: USER_REGISTER_FAIL,\r\n                                payload:\r\n                                error.message });\r\n                        toast.error(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });                      \r\n                document.getElementById(\"submitting\").innerText = \"Add User\";\r\n                document.getElementById(\"submitting\").disabled  = false;                                               \r\n            });\r\n};\r\nexport const updateUser = (postBody,id,loggedUserId) => async (dispatch) => {\r\n\r\n                dispatch({ type: USER_UPDATE_REQUEST });\r\n\r\n                await updateUsersProfileById(postBody,id).then(response => {\r\n                if(id===loggedUserId){\r\n                  (response.data).profile = true;      \r\n                }\r\n                else{\r\n                   (response.data).profile = false;  \r\n                }\r\n                dispatch({ type: USER_UPDATE_SUCCESS, payload: response.data });\r\n                dispatch({ type: USER_LOGIN_SUCCESS, payload: response.data });            \r\n                if(response.status===201)\r\n                {\r\n                /*swal({\r\n                        title: \"Successful!\",\r\n                        text: 'User Addes Successfully !',\r\n                        icon: \"success\",\r\n                        button: \"OK!\",\r\n                });*/   if(id===loggedUserId){\r\n                                setUser(response.data);\r\n                                toast.success('Users Profile is Updated Successfully!', {\r\n                                        position: \"bottom-right\",\r\n                                        hideProgressBar: false,\r\n                                        progress: undefined,\r\n                                });\r\n                        }\r\n                        else {\r\n                                toast.success(`User \"${(response.data).name}\" is Updated Successfully!`, {\r\n                                        position: \"bottom-right\",\r\n                                        hideProgressBar: false,\r\n                                        progress: undefined,\r\n                                });\r\n                        }\r\n                }\r\n                else {\r\n                        toast.error(response.data, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                document.getElementById(\"submitting\").innerText = \"Update Profile\";\r\n                document.getElementById(\"submitting\").disabled  = false;                                              \r\n                }\r\n    }).catch((error) => {\r\n                        dispatch({\r\n                                type: USER_UPDATE_FAIL,\r\n                                payload:\r\n                                error.message });\r\n                        toast.error(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                document.getElementById(\"submitting\").innerText = \"Update Profile\";\r\n                document.getElementById(\"submitting\").disabled  = false;                                              \r\n    });\r\n};\r\nexport const editUserFromAdminByIds = (postBody,id) => async (dispatch) => {\r\n\r\n        dispatch({ type: EDIT_USER_FROM_ADMIN_REQUEST });\r\n\r\n        await editUserFromAdminById(postBody,id).then(response => {\r\n\r\n        dispatch({ type:EDIT_USER_FROM_ADMIN_SUCCESS, payload: response.data });\r\n       // dispatch({ type: USER_LOGIN_SUCCESS, payload: response.data });            \r\n        if(response.status===201)\r\n        {\r\n                toast.success(`User \"${(response.data).name}\" is Updated Successfully!`, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        }\r\n        else {\r\n                toast.error(response.data, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        document.getElementById(\"submitting\").innerText = \"Update User\";\r\n        document.getElementById(\"submitting\").disabled  = false;                                              \r\n        }\r\n}).catch((error) => {\r\n                dispatch({\r\n                        type: EDIT_USER_FROM_ADMIN_FAIL,\r\n                        payload:\r\n                        error.message });\r\n                toast.error(error.message, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        document.getElementById(\"submitting\").innerText = \"Update User\";\r\n        document.getElementById(\"submitting\").disabled  = false;                                              \r\n});\r\n};\r\nexport const logoutUser = () => async (dispatch) => {\r\n                dispatch({ type: USER_LOGOUT }); \r\n                await logout().then(response => {\r\n                if(response.status===201) {\r\n                        removeUser();\r\n                        toast.success('User Logged Out Successfully!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                }\r\n                else if(response.status===208){\r\n                        toast.error(response.data, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                }       \r\n                }).catch(error =>{\r\n                        toast.error(error.maessage, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                });      \r\n}\r\nexport const usersAll = (loggedUserId) => async (dispatch) => {\r\n        dispatch({ type: USER_ALL_REQUEST }); \r\n        await allUsers(loggedUserId).then(response => {\r\n                dispatch({ type: USER_ALL_SUCCESS,payload: response.data}); \r\n        if(response.status===201) {\r\n               /* toast.success('User Logged Out Successfully!', {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });*/\r\n        }\r\n        else {\r\n                dispatch({ type: USER_ALL_FAIL,payload: response.message}); \r\n                toast.error(response.message, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        }       \r\n        }).catch(error =>{\r\n                dispatch({ type: USER_ALL_FAIL,payload: error.maessage}); \r\n                toast.error(error.maessage, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        });      \r\n}\r\nexport const userSearchs = (data,loggedUserId) => async(dispatch) =>\r\n{       \r\n        dispatch({type:USER_GETUSERBYSEARCH_REQUEST});\r\n        await searchUsers(data,loggedUserId).then(response => {\r\n                dispatch({type:USER_GETUSERBYSEARCH_SUCCESS,payload:response.data});\r\n        if(response.status===201 )\r\n        {\r\n                toast.success(response.data, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        }\r\n        else {\r\n                dispatch({type:USER_GETUSERBYSEARCH_FAIL,payload:`OOps!...No Record Found on this ID ${loggedUserId} !!`});\r\n                toast.error(`OOps!...No Record Found on this ID ${loggedUserId} !!`, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        }\r\n \r\n        }).catch(error => {\r\n                dispatch({type:USER_GETUSERBYSEARCH_FAIL,payload:error.message});\r\n                toast.error(error.message, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        });\r\n}\r\nexport const deleteUsers = (e,id) => async(dispatch) =>\r\n{       \r\n        dispatch({type:USER_DELETE_REQUEST});\r\n        let targetSet = e.currentTarget;\r\n       \r\n        await deleteUser(id).then(response => {\r\n                dispatch({type:USER_DELETE_SUCCESS,payload:response.data});\r\n        if((response.status===201 || response.status===200) && (response.data!==403 && response.data!==401 && response.data!==404))\r\n        {\r\n                targetSet.innerText='Delete';\r\n                e.target.closest(\"tr\").remove();\r\n                toast.success(response.data, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        }\r\n        }).catch(error => {\r\n                dispatch({type:USER_DELETE_FAIL,payload:error.message});\r\n                toast.error(error.message, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n        });\r\n} \r\nexport const getUserDetails = (id) => async(dispatch) =>\r\n{       \r\n        dispatch({type:USER_GET_DETAILS_REQUEST});\r\n \r\n        await usersProfileByid(id).then(response => {\r\n               // alert(JSON.stringify(response.data));\r\n                dispatch({type:USER_GET_DETAILS_SUCCESS,payload:response.data});\r\n                if(response.status===201)\r\n                {\r\n                /* toast.success('User Updated Successfully!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });*/\r\n                }\r\n                }).catch(error => {\r\n                        dispatch({type:USER_GET_DETAILS_FAIL,payload:error.message});\r\n                        toast.error(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                });\r\n} \r\n// take the email token sent from the mail, and confirm the account once the link is clicked\r\nexport const confirmUsers = (emailToken, alreadyLoggedIn = false) => async (dispatch, getState) => {\r\n\r\n\t\t\tdispatch({ type: USER_CONFIRM_REQUEST });\r\n\t\t\tawait confirmUser(`${emailToken}`).then(response => {\r\n\r\n\t\t\t// remove variable meant to prompt the user for email verification\r\n\t\t\tlocalStorage.removeItem('promptEmailVerfication');\r\n\t\t\tdispatch({ type: USER_CONFIRM_SUCCESS, payload: true });\r\n\t\t\tif (alreadyLoggedIn) {\r\n\t\t\t\tdispatch({ type: USER_CONFIRM_SUCCESS, payload: response.data });\r\n\t\t\t\tlocalStorage.setItem('userInfo', JSON.stringify(response.data));\r\n\t\t\t}\r\n\t\t}).catch(error => {\r\n\t\t\tdispatch({type: USER_CONFIRM_FAIL,\r\n                                        payload:error.message\r\n\t\t\t\t});\r\n                        toast.error(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n\t\t});\r\n}\r\n","import axios from \"axios\";\r\nimport { /*http,*/getAPIUrlCarts } from \"../utils/localStorage\";\r\naxios.defaults.withCredentials=true;\r\n\r\nexport const listProduct = async() => {\r\n        return await axios.get(`${getAPIUrlCarts()}/listProduct`);\r\n}\r\nexport const productCartById = async(id) => {\r\n        return await axios.get(`${getAPIUrlCarts()}/listProductByidCart/${id}`);\r\n}\r\n\r\n\r\n","export const CART_PORDUCTTO_CART_REQEUST = \"CART_PORDUCTTO_CART_REQEUST\";\r\nexport const CART_PORDUCTTO_CART_SUCCESS = \"CART_PORDUCTTO_CART_SUCCESS\";\r\nexport const CART_PORDUCTTO_CART_FAIL = \"CART_PORDUCTTO_CART_FAIL\";\r\n\r\nexport const CART_LIST_REQEUST = \"CART_LIST_REQEUST\";\r\nexport const CART_LIST_SUCCESS = \"CART_LIST_SUCCESS\";\r\nexport const CART_LIST_FAIL = \"CART_LIST_FAIL\";\r\n\r\nexport const CART_PAGE_REQEUST = \"CART_PAGE_REQEUST\";\r\nexport const CART_PAGE_SUCCESS = \"CART_PAGE_SUCCESS\";\r\nexport const CART_PAGE_FAIL = \"CART_PAGE_FAIL\";\r\n\r\nexport const CART_ADD_ITEM = \"CART_ADD_ITEM\";\r\nexport const CART_REMOVE_ITEM = \"CART_REMOVE_ITEM\";\r\nexport const CART_SAVE_SHIPPING_ADDRESS = \"CART_SAVE_SHIPPING_ADDRESS\";\r\nexport const CART_SAVE_PAYMENT_METHOD = \"CART_SAVE_PAYMENT_METHOD\";\r\nexport const CART_RESET = \"CART_RESET\";\r\n\r\n\r\n\r\n","import { listProduct,productCartById } from \"../../routes/cartRoutes\";\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n        CART_LIST_FAIL,\r\n        CART_LIST_REQEUST,\r\n        CART_LIST_SUCCESS,\r\n        CART_PORDUCTTO_CART_REQEUST,\r\n        CART_PORDUCTTO_CART_SUCCESS,\r\n        CART_PORDUCTTO_CART_FAIL,\r\n        CART_ADD_ITEM,\r\n\tCART_REMOVE_ITEM,\r\n\tCART_SAVE_SHIPPING_ADDRESS,\r\n\tCART_SAVE_PAYMENT_METHOD/*,\r\n        CART_RESET,\r\n        USER_UPDATE_FAIL,\r\n        USER_UPDATE_REQUEST,\r\n        USER_UPDATE_SUCCESS,*/\r\n      } from \"../actionTypes/cartConstants\";\r\nexport const productListings = () => async(dispatch) => {\r\n        dispatch({type:CART_LIST_REQEUST});\r\n                \r\n                await listProduct().then(response => {\r\n                        dispatch({type:CART_LIST_SUCCESS,payload:response.data});\r\n                        if(response.status===201){\r\n                              //  setProduct(response.data);\r\n                               /* toast.success('User is Logged in Successfully!', {\r\n                                        position: \"bottom-right\",\r\n                                        hideProgressBar: false,\r\n                                        progress: undefined,\r\n                                });*/\r\n                        }\r\n                        else{\r\n                                dispatch({type:CART_LIST_FAIL,payload:response.message});\r\n                               /* toast.success('User is Logged in Successfully!', {\r\n                                        position: \"bottom-right\",\r\n                                        hideProgressBar: false,\r\n                                        progress: undefined,\r\n                                });  */\r\n                        }\r\n\r\n                }).catch(error => {\r\n                        dispatch({type:CART_LIST_FAIL,payload:error.message});\r\n                        toast.success(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                });\r\n}\r\nexport const productByIdToCart = (id) => async(dispatch) => {\r\n        dispatch({type:CART_PORDUCTTO_CART_REQEUST});\r\n                \r\n                await productCartById(id).then(response => {\r\n                        dispatch({type:CART_PORDUCTTO_CART_SUCCESS,payload:response.data});\r\n                        if(response.status===201){\r\n                               // setProduct(response.data);\r\n                               /* toast.success('User is Logged in Successfully!', {\r\n                                        position: \"bottom-right\",\r\n                                        hideProgressBar: false,\r\n                                        progress: undefined,\r\n                                });*/\r\n                        }\r\n                        else{\r\n                              /*  dispatch({type:CART_LIST_FAIL,payload:response.message});\r\n                                toast.success('User is Logged in Successfully!', {\r\n                                        position: \"bottom-right\",\r\n                                        hideProgressBar: false,\r\n                                        progress: undefined,\r\n                                });  */\r\n                        }\r\n\r\n                }).catch(error => {\r\n                        dispatch({type:CART_PORDUCTTO_CART_FAIL,payload:error.message});\r\n                        toast.success(error.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });\r\n                });\r\n}\r\n// get the product id and the quantity of the item to add to the cart\r\nexport const addItem = (id, qty) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tawait productCartById(id).then(response => {\r\n                        dispatch({\r\n                                type: CART_ADD_ITEM,\r\n                                payload: {\r\n                                        _id: response.data._id,\r\n                                        name: response.data.name,\r\n                                        image: response.data.image,\r\n                                        rate: response.data.rate,\r\n                                        numberOfItem: response.data.numberOfItem,\r\n                                        qty,}\r\n                                \r\n                        });\r\n                });\r\n\t\t// update the local storage with the new cart\r\n               // alert('setting'+JSON.stringify(getState().cart.cartInfo))\r\n                \r\n\t\tlocalStorage.setItem(\r\n\t\t\t'cartInfo',\r\n\t\t\tJSON.stringify(getState().cart.cartInfo)\r\n\t\t);\r\n\t} catch (error) {\r\n\t\tconsole.error(error);\r\n\t}\r\n};\r\n\r\n// get the product id to be removed from the cart\r\nexport const removeItem = (id) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: CART_REMOVE_ITEM,\r\n\t\t\tpayload: id,\r\n\t\t});\r\n\t\t// update the session storage with the updated cart\r\n\t\tlocalStorage.setItem(\r\n\t\t\t'cartInfo',\r\n\t\t\tJSON.stringify(getState().cart.cartInfo)\r\n\t\t);\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\n// get the shipping address data and dispatch corresponding action\r\nexport const saveShippingAddress = (data) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: CART_SAVE_SHIPPING_ADDRESS,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t\tlocalStorage.setItem('shippingAddress', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\n// get the option for payment and update the local storage as well\r\nexport const savePaymentMethod = (data) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({\r\n\t\t\ttype: CART_SAVE_PAYMENT_METHOD,\r\n\t\t\tpayload: data,\r\n\t\t});\r\n\t\tlocalStorage.setItem('paymentMethod', JSON.stringify(data));\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n","import React,{ useState, useEffect } from 'react';\r\nimport {AppBar,Toolbar, styled,Typography,Box,Menu,MenuItem,Button} from '@mui/material';\r\nimport PopupState, { bindTrigger, bindMenu } from 'material-ui-popup-state';\r\nimport { useNavigate,NavLink,Link } from 'react-router-dom';\r\nimport '../../hide.css';\r\nimport {getProduct} from '../../utils/localStorage';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {logoutUser} from '../../store/actions/authActions';\r\nimport {removeItem} from '../../store/actions/cartActions';\r\n\r\nconst Navbar = () => {\r\n\r\n   const navigate = useNavigate();\r\n   const dispatch = useDispatch();\r\n   const [name,setName] = useState();\r\n   const [isAdmin,setIsAdmin] = useState();\r\n   const [updateId,setUpdateId] = useState();\r\n   const [imageLoggedInUrl,setImageLoggedInUrl] = useState();\r\n   const userLogin = useSelector(state=>state.userLogin);\r\n   const {userInfo} = userLogin;\r\n   const cart = useSelector((state) => state.cart);\r\n   const { cartInfo } = cart;\r\n   const [userId,setUserid] = useState('');\r\n   const [itemCount, setItemCount] = useState(0);\r\n   //const [cartInfo,setProductInfo] = useState([]);\r\n   const [cartId,setCartId] = useState('');\r\n   const onLogout= async(e) => {\r\n            dispatch(logoutUser());\r\n            dispatch(removeItem(cartId));\r\n           // removeUser();\r\n            localStorage.clear();\r\n            setUserid('');\r\n            //navigate(0); ///reload login page to show recaptcha other wise recaptcha was not loading\r\n            navigate(\"/\");\r\n   }\r\n\t\t// update count when new cart changes\r\n    useEffect(() => {\r\n      setItemCount(cartInfo.reduce((acc, item) => acc + item.qty, 0));\r\n    }, [cartInfo]);\r\n\r\n    useEffect(() => {\r\n    let products = getProduct();\r\n\t\tif (products && products[0]) {\r\n      setCartId(products[0]._id);\r\n    }\r\n    ///using funda of local storage it will failwhen logged in used will update their image which is coming from cloudinary cloud of online managing images, documents\r\n    const saved = localStorage.getItem(\"userInfo\");\r\n    //setting up values to hide all navbar urls which are not necessory after login\r\n    if(saved){\r\n        const initialValue = JSON.parse(saved);\r\n       // alert(JSON.stringify(initialValue))\r\n        //for updating navbar conents after login getting content in userId\r\n        if(initialValue)\r\n        {\r\n          setUserid(saved);\r\n          setUpdateId(initialValue._id);\r\n          setName(initialValue.name);\r\n          setIsAdmin(initialValue.isAdmin);\r\n          setImageLoggedInUrl(initialValue.image.url); //image url from cloudinary cloud from localStorage\r\n          // Promise.resolve(getUserById(initialValue._id)).then((result)=>setImageLoggedInUrl(result.data.Image.url));\r\n        }\r\n    }\r\n  },[userInfo,cartInfo]);\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1 }} >\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n        <Typography variant='h5'  sx={{ flexGrow: 1 }}><Tabs to=\"/\" style={{fontSize: '25px'}}>MERN with Redux Client</Tabs></Typography>\r\n          \r\n              <Tabs color=\"inherit\" to=\"/home\" className={`${!userId ? \"mystyle\" : \"\"}`}>Home</Tabs> \r\n              <Tabs color=\"inherit\" reloadDocument to=\"/login\" className={`${userId ? \"mystyle\" : \"\"}`}>Login</Tabs> \r\n              <Tabs color=\"inherit\" reloadDocument to=\"/sign-up\" className={`${userId ? \"mystyle\" : \"\"}`}>Sign Up</Tabs>\r\n              {userId && isAdmin===true && (\r\n                  <div className={`${!userId ? \"mystyle\" : \"\"}`} id=\"admin\">\r\n                      <PopupState variant=\"popover\" popupId=\"demo-popup-menu\">\r\n                        {(popupState) => (\r\n                          <React.Fragment>\r\n                            <Button  {...bindTrigger(popupState)}>\r\n                            <Tabs > Admin</Tabs>\r\n                            </Button>\r\n                            <Menu {...bindMenu(popupState)}>\r\n                              <MenuItem onClick={popupState.close}><Tabs color=\"inherit\" style={{color:'black',textDecoration: 'none'}} to=\"/users\" >All Users</Tabs></MenuItem>\r\n                              <MenuItem onClick={popupState.close}><Tabs color=\"inherit\" style={{color:'black',textDecoration: 'none'}} to=\"/listproduct\" >All Products</Tabs></MenuItem>\r\n                              <MenuItem onClick={popupState.close}><Tabs style={{color:'black',textDecoration: 'none'}} to=\"/orderpage\" >Orders</Tabs></MenuItem>\r\n                              {/* <MenuItem onClick={popupState.close}><Tabs style={{color:'black',textDecoration: 'none'}} to=\"/modal\" >Modal Test</Tabs></MenuItem> */}\r\n                            </Menu>\r\n                          </React.Fragment>\r\n                        )}\r\n                      </PopupState>\r\n                  </div>\r\n                  )}\r\n                  <div className={`${!userId ? \"mystyle\" : \"\"}`} id=\"profile\">\r\n                       <PopupState variant=\"popover\" popupId=\"demo-popup-menu\">\r\n                          {(popupState) => (\r\n                            <React.Fragment>\r\n                              <Button  {...bindTrigger(popupState)}>\r\n                              <Tabs >{name}</Tabs><img src={imageLoggedInUrl} className='bag-quantity' alt=\"\"/>\r\n                              </Button>\r\n                              <Menu {...bindMenu(popupState)}>\r\n                                <MenuItem onClick={popupState.close}><a style={{color:'black',textDecoration: 'none'}} href={`/user-profile/${updateId}`} >Profile</a></MenuItem>\r\n                                <MenuItem onClick={popupState.close}><Tabs color=\"inherit\" style={{color:'black',textDecoration: 'none'}} onClick={(e) => {onLogout(e)}}>Logout</Tabs></MenuItem>\r\n                              </Menu>\r\n                            </React.Fragment>\r\n                          )}\r\n                        </PopupState>\r\n\r\n                  </div>\r\n                  <div id=\"ex4\">\r\n                   {itemCount >0 ? \r\n                                     (<Tabs3 to={`/cart/${cartId}`}><span class=\"p1 fa-stack fa-2x has-badge\" data-count={itemCount}>\r\n                                        <i class=\"p4 fa fa-shopping-cart fa-stack-1x xfa-inverse\" /*style={{fontSize:'10px'}}*/><Tabs2>Cart</Tabs2></i>\r\n                                      </span>\r\n                                       </Tabs3>)\r\n                                      : (<Tabs3 to={`/cart/${cartId}`}><span class=\"p1 fa-stack fa-2x has-badge\"  >\r\n                                      <i class=\"p4 fa fa-shopping-cart fa-stack-1x xfa-inverse\" /*style={{fontSize:'10px'}}*/><Tabs2>Cart</Tabs2></i>\r\n                                    </span>\r\n                                     </Tabs3>) }\r\n\r\n                  \r\n                  </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n\r\nconst Tabs = styled(NavLink)`\r\nfont-size: 15px;\r\nmargin-right: 20px;\r\ncolor:white;\r\ntext-decoration:none;\r\ntext-transform: capitalize;\r\n`\r\nconst Tabs2 = styled(NavLink)`\r\nfont-size: 13px;\r\nmargin-right: 20px;\r\ncolor:white;\r\ntext-decoration:none;\r\ntext-transform: capitalize;\r\n`\r\nconst Tabs3 = styled(NavLink)`\r\nfont-size: 10px;\r\nmargin-right: 20px;\r\ncolor:white;\r\ntext-decoration:none;\r\ntext-transform: capitalize;\r\n`","import React from 'react';\r\nimport ClipLoader from 'react-spinners/ClipLoader';\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div style={{ width: '100px', margin: 'auto', display: 'block' }}>\r\n      <ClipLoader color=\"#52bfd9\" size={100}/>\r\n    </div>\r\n  );\r\n};\r\nexport default Loading;\r\n","import React,{ useEffect,useRef } from 'react';\r\nimport { Typography,FormGroup,FormControl,TextField,styled,Button,FormControlLabel,InputLabel,Select,MenuItem,FormLabel,RadioGroup, Radio ,ImageListItem,ImageList,Avatar,InputAdornment,IconButton } from '@mui/material';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { useState } from 'react';\r\nimport Loading from \"../layout/Loading\";\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useFormik } from 'formik'; \r\nimport * as Yup from 'yup';\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport { deepOrange } from '@mui/material/colors';\r\nimport '../../hide.css';\r\nimport {registerUser} from '../../store/actions/authActions';\r\nimport {validateCaptcha} from '../../routes/userRoutes';\r\n\r\nconst Signup = () => {\r\n    const [values, setValues] = useState({showPassword: false});\r\n    const [valuesRe, setValuesRe] = useState({showRePassword: false});\r\n    \r\n    const [isAdmin,setIsadmin] = useState('');\r\n    const [image,setImage] = useState('');\r\n    const [show, setShow] = useState(false)\r\n    const captchaRef = useRef(null);\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const userRegister = useSelector((state) => state.userRegister);\r\n    const { loading, error, userInfo } = userRegister;\r\n\r\n    const initialValues ={\r\n          name:'Pradeep Kumar Maurya',\r\n          occupation:'Software Engineer',\r\n          email:'pradeepmaurya@yahoo.com',\r\n          password:'Amitabh@2',\r\n          repassword:'Amitabh@2',\r\n          phone:'1222121121',\r\n          description:'Software Engineer and alone due to deception from family and son.',\r\n          age:'40',\r\n          gender:'Male',\r\n          image:'',\r\n          recaptcha:''\r\n    }\r\n    const schema = Yup.object({\r\n            name:Yup.string()\r\n                    .required('Name is required!')\r\n                    .min(3, 'Name should have of minimum 3 characters')\r\n                    .max(50, 'Name should have of minimum 30 characters'),\r\n            occupation: Yup.string()\r\n                          .required(\"Occupation is required!\")\r\n                          .min(3,\"Occupation should have minimum 3 characters!\")\r\n                          .max(30,\"Occupation should have maximum 30 characters!\"),\r\n            email: Yup.string()\r\n                        .required(\"Email is required!\")\r\n                        .email(\"Email is invalid!\")\r\n                        .min(8,'Email should have of minimum 8 characters length!'),\r\n            password: Yup.string()\r\n                        .min(8, 'Password should be of minimum 6 characters length')\r\n                        .max(30, 'Password should be of minimum 30 characters length')\r\n                        .required('Password is required') //in editing password is not required initially because it comes from database and we will not check its required\r\n                        .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/, 'Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters.'),\r\n            repassword: Yup.string('')\r\n                        .min(8, 'Re Password should be of minimum 6 characters length')\r\n                        .max(30, 'Re Password should be of minimum 30 characters length')\r\n                        .required('Re Password is required') //.required('Password is required') in editing password is not required initially because it comes from database  and we will not check its required\r\n                        .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/, 'Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters.')\r\n                        .when('password', {\r\n                          is: (val) => !!(val && val.length > 0),\r\n                          then: Yup.string().oneOf(\r\n                            [Yup.ref('password')],\r\n                            'Password and Retype Password do not match')\r\n                        }),                        \r\n            phone: Yup.string()\r\n                      .required(\"Phone is required!\")\r\n                      .min(10,\"Phone should have minimum 10 digits!\"),\r\n            description: Yup.string()\r\n                          .required(\"Description is required!\")\r\n                          .min(3,\"Descrition should have minimum 3 characters!\")\r\n                          .max(1000,\"Descrition should have maximum 1500 characters!\"),\r\n            age:         Yup.string()\r\n                            .required(\"Age is required!\"),       \r\n            gender:     Yup.string()\r\n                          .required(\"Please select a gender!\"),               \r\n            image: Yup.mixed()\r\n                      .nullable()\r\n                      .required(\"Image is required!\")\r\n                      .test('type',  \"We only support jpeg/jpg/png/bmp formats\", function (value) {\r\n                        //alert('Here='+value.type)\r\n                        return value && (value.type === \"image/jpeg\" || \r\n                                        value.type === \"image/bmp\" || \r\n                                        value.type === \"image/jpg\" || \r\n                                        value.type === \"image/png\")}),\r\n            recaptcha : Yup.string()\r\n                           .required(\"Please confirm that you are not a robot, to select checkbox!\")                                         \r\n  })\r\n    const formik = useFormik({\r\n        initialValues:initialValues,\r\n        validationSchema: schema,\r\n        onSubmit: (values,{resetForm}) => {\r\n            onRegister(values,resetForm);\r\n        }\r\n    })\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n    const handleClickShowRePassword = () => {\r\n        setValuesRe({ ...valuesRe, showRePassword: !valuesRe.showRePassword });\r\n    };\r\n\r\n    const handleProductImageUpload = (e) => {\r\n        const file = e.target.files[0];\r\n    \r\n        TransformFileData(file);\r\n    };\r\n    //reading image using The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.\r\n    const TransformFileData = (file) => {\r\n        const reader = new FileReader();\r\n        const fileType =file.type;\r\n        let types = false; \r\n        if(fileType!==\"image/jpeg\" && fileType!==\"image/bmp\" && fileType!==\"image/jpg\" && fileType!==\"image/png\"){\r\n            types = true; \r\n        }\r\n        else{\r\n            types = false;\r\n        }\r\n        if(types===false){\r\n            if (file) {\r\n                reader.readAsDataURL(file);\r\n                reader.onloadend = () => {\r\n                  setImage(reader.result);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            setImage(\"\");\r\n        }\r\n      };\r\n    \r\n    const onRegister = async(val) => {\r\n        /** recaptcha code begins */\r\n        const token = captchaRef.current.getValue();\r\n        captchaRef.current.reset();\r\n        await validateCaptcha(token).then(resp => {\r\n            if(resp.data===\"Human\"){\r\n               // alert(\"You are Human\"); //recaptcha is successfull\r\n            }\r\n            else{\r\n               // alert(\"You are Robot\"); //recaptcha is failed\r\n            }\r\n\r\n        });\r\n        /** recaptcha code end */\r\n        const postBody = {\r\n            name:val.name,\r\n            occupation: val.occupation,\r\n            email:val.email,\r\n            password:val.password,\r\n            phone: val.phone,\r\n            description: val.description,\r\n            age:val.age,\r\n            gender:val.gender,            \r\n            isAdmin:isAdmin,\r\n            image:image\r\n        }\r\n        document.getElementById(\"submitting\").innerText=\"Adding User...Please wait\";\r\n        document.getElementById(\"submitting\").disabled=true; \r\n        dispatch(registerUser(postBody));\r\n\r\n    }\r\n    useEffect(() => {\r\n        if(userInfo){\r\n            localStorage.setItem('promptEmailVerfication', 'true');\r\n            navigate(\"/\");\r\n         }\r\n    },[userInfo,error]);  \r\n  return (\r\n    <Container>\r\n            <center><Avatar style={{alignItems:'center'}} sx={{ bgcolor: deepOrange[500] }} /></center>\r\n            <Typography variant=\"h5\" style={{textAlign:'center'}}>Sign Up <Ptags>(All the field having * are required)</Ptags></Typography>\r\n            {loading && <Loading />}\r\n                <FormControl>\r\n                    <TextField \r\n                            value={formik.values.name} \r\n                            required='required'\r\n                            id=\"name\"\r\n                            name=\"name\" \r\n                            label=\"Name\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            helperText={formik.touched.name && formik.errors.name} \r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField value={formik.values.occupation} \r\n                               label=\"Occupation\" \r\n                               name=\"occupation\" \r\n                               onChange={formik.handleChange} required \r\n                               error={formik.touched.occupation && Boolean(formik.errors.occupation)}\r\n                               helperText={formik.touched.occupation && formik.errors.occupation}\r\n                               />\r\n                </FormControl>                 \r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.email} \r\n                            required='required'\r\n                            id=\"email\"\r\n                            name=\"email\" \r\n                            label=\"Email\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email} \r\n                    /><Spanning id=\"email-error\"></Spanning>\r\n                </FormControl>\r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.password} \r\n                            required='required'\r\n                            id=\"password\"\r\n                            name=\"password\" \r\n                            label=\"Password\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password} \r\n                            type={values.showPassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}}\r\n                    />\r\n                </FormControl> \r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.repassword} \r\n                            required='required'\r\n                            id=\"repassword\"\r\n                            name=\"repassword\" \r\n                            label=\"RePassword\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.repassword && Boolean(formik.errors.repassword)}\r\n                            helperText={formik.touched.repassword && formik.errors.repassword} \r\n                            type={valuesRe.showRePassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowRePassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {valuesRe.showRePassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}}\r\n                    />\r\n                </FormControl> \r\n                <FormControl>\r\n                    <TextField value={formik.values.phone} \r\n                               required\r\n                               label=\"Phone\" \r\n                               name=\"phone\" \r\n                               onChange={formik.handleChange} \r\n                               type=\"number\" \r\n                               onInput = {(e) =>{e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0,10)}}  \r\n                               error={formik.touched.phone && Boolean(formik.errors.phone)}\r\n                               helperText={formik.touched.phone && formik.errors.phone}\r\n                               />\r\n                </FormControl>     \r\n                <FormControl>\r\n                    <TextField value={formik.values.description} \r\n                               label=\"Description\" \r\n                               name=\"description\" \r\n                               onChange={formik.handleChange} required \r\n                               multiline\r\n                               rows={4}\r\n                               error={formik.touched.description && Boolean(formik.errors.description)} \r\n                               helperText={formik.touched.description && formik.errors.description}/>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel label=\"Age\" required error={formik.touched.age && Boolean(formik.errors.age)} \r\n                               helperText={formik.touched.age && formik.errors.age}>Age</InputLabel>\r\n                    <Select value={formik.values.age} \r\n                               label=\"Age\" \r\n                               name=\"age\" \r\n                               onChange={formik.handleChange} required \r\n                               error={formik.touched.age && Boolean(formik.errors.age)} \r\n                               helperText={formik.touched.age && formik.errors.age}>\r\n                                \r\n                        <MenuItem value=\"10\">10 Years</MenuItem>\r\n                        <MenuItem value=\"20\">20 Years</MenuItem> \r\n                        <MenuItem value=\"30\">30 Years</MenuItem> \r\n                        <MenuItem value=\"40\">40 Years</MenuItem>     \r\n                        <MenuItem value=\"50\">50 Years</MenuItem>\r\n                        <MenuItem value=\"60\">60 Years</MenuItem> \r\n                        <MenuItem value=\"70\">70 Years</MenuItem> \r\n                        <MenuItem value=\"80\">80 Years</MenuItem> \r\n                    </Select>       \r\n                </FormControl>  \r\n                <Spannings id=\"age-error\">{(formik.touched.age && formik.errors.age)?<div>{formik.errors.age}</div>:''}   </Spannings>                 \r\n                <FormControl  className=\"fieldset\">\r\n                    <FormLabel  required error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                        helperText={formik.touched.gender && formik.errors.gender}>Gender</FormLabel>\r\n                    <RadioGroup\r\n                        value={formik.values.gender}\r\n                        row\r\n                        name=\"gender\" // eslint-disable-next-line no-unused-expressions \r\n                        onChange={(e) => {formik.handleChange;formik.setFieldValue(\"gender\",e.currentTarget.value)}}\r\n                        required \r\n                       /* error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                        helperText={formik.touched.gender && formik.errors.gender*}*/>\r\n                        <FormControlLabel \r\n                                value=\"Male\"\r\n                                control={<Radio />} \r\n                                label=\"Male\" \r\n                                />\r\n                        <FormControlLabel \r\n                                value=\"Female\"\r\n                                control={<Radio />} \r\n                                label=\"Female\" \r\n                                />\r\n                    </RadioGroup>\r\n                 </FormControl>         \r\n                 <Spannings id=\"gender-error\">{(formik.touched.gender && formik.errors.gender)?<div>{formik.errors.gender}</div>:''}   </Spannings>                  \r\n                <FormControl>                                \r\n                    <ImageList>\r\n                        \r\n                        <Ptags ><Typography >Choose an image</Typography>\r\n                                    <input\r\n                                    id=\"image\"\r\n                                    accept=\"image/*\"\r\n                                    name=\"image\"\r\n                                    type=\"file\"\r\n                                    onChange={(e) => {handleProductImageUpload(e);formik.setTouched({\r\n                                        ...formik.touched.image\r\n                                      });formik.setFieldValue( \"image\", e.target.files[0] )}}\r\n                                    />\r\n                        </Ptags>\r\n                                <ImagePreview>\r\n                                    {image ? (\r\n                                    <>\r\n                                        <img src={image} alt=\"error!\" />\r\n                                    </>\r\n                                    ) : (\r\n                                    <p>Product image upload preview will appear here!</p>\r\n                                    )}\r\n                                </ImagePreview>\r\n                    </ImageList>\r\n                    <Spannings id=\"iamges\">{(formik.touched.image && formik.errors.image)?<div>{formik.errors.image}</div>:null}</Spannings>\r\n                </FormControl>    \r\n                {/* <FormControl>\r\n                    <FormControlLabel control={<Checkbox /*defaultChecked />} label=\"Set Admin\" id=\"isAdmin\" name=\"isAdmin\" checked={isAdmin} onChange={(e) => setIsadmin(e.target.checked)}/>\r\n                </FormControl>  */}\r\n                {/** recaptcha code begins */}\r\n                <FormControl>\r\n                    <ReCAPTCHA sitekey={process.env.REACT_APP_SITE_KEY} \r\n                               theme='light' \r\n                               ref={captchaRef} // eslint-disable-next-line no-unused-expressions \r\n                               onChange={(e) => {formik.handleChange;formik.setFieldValue( \"recaptcha\", 'formikchanges')}} \r\n                               />\r\n                <Spanning id=\"captcha-error\">{(formik.touched.recaptcha && formik.errors.recaptcha)?<div>{formik.errors.recaptcha}</div>:null}</Spanning> \r\n                </FormControl>\r\n                {/** recaptcha code ends */}\r\n                <FormControl>\r\n                    <Buttons variant=\"contained\" type=\"submit\" id=\"submitting\" onClick={(e) => formik.handleSubmit()}>Add User</Buttons>\r\n                </FormControl>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Signup;\r\nconst Container = styled(FormGroup)`\r\nwidth: 40%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 .8rem;\r\n`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 80%;\r\n`\r\nconst ImagePreview = styled(ImageListItem)`\r\n  margin: 2rem 0 2rem 2rem;\r\n  padding: 2rem;\r\n  border: 1px solid rgb(183, 183, 183);\r\n  max-width: 200px;\r\n  width: 90%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 2rem;\r\n  color: rgb(78, 78, 78);\r\n\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n`\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\n`\r\n","import React,{useEffect,useRef,useState} from 'react';\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport { Typography,FormGroup,FormControl,TextField,styled,Button, FormLabel,Avatar,InputAdornment,IconButton} from '@mui/material';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport EmailIcon from '@mui/icons-material/Email';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport { useNavigate,Link } from 'react-router-dom';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport {loginUser} from '../../store/actions/authActions';\r\nimport {validateCaptcha} from '../../routes/userRoutes';\r\nimport { deepOrange } from '@mui/material/colors';\r\nimport Loading from '../layout/Loading';\r\nimport { useFormik } from 'formik'; \r\nimport * as Yup from 'yup';\r\n//import swal from 'sweetalert';\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const [values, setValues] = useState({showPassword: false});\r\n    const captchaRef = useRef(null);\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { loading, userInfo } = userLogin;\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: 'Amitabh@2',\r\n        recaptcha:''\r\n      }\r\n    const schema = Yup.object({\r\n        email: Yup.string('')\r\n          .email('Enter a valid email!')\r\n          .required('Email is required!'),\r\n        password: Yup.string('')\r\n          .min(8, 'Password should be of minimum 8 characters length!')\r\n          .max(30, 'Password should be of minimum 30 characters length!')\r\n          .required('Password is required!')// eslint-disable-next-line no-unused-expressions \r\n          .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/,\"Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters!\"),// eslint-disable-next-line no-unused-expressions\r\n        recaptcha : Yup.string()\r\n                       .required(\"Please confirm that you are not a robot, to select checkbox!\") \r\n      }); \r\n    const formik = useFormik({\r\n        initialValues: initialValues,\r\n        validationSchema: schema,\r\n          onSubmit: (values,{ resetForm }) => {\r\n           onAdminLogin(values, resetForm);\r\n        }\r\n    });\r\n    \r\n    const handleClickShowPassword = () => {\r\n      setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n    const onAdminLogin = async(val) => {\r\n        /** recaptcha code begins */\r\n        const token = captchaRef.current.getValue();\r\n        captchaRef.current.reset();\r\n        await validateCaptcha(token).then(resp => {\r\n            if(resp.data===\"Human\"){\r\n               // alert(\"You are Human\"); recaptcha is successfull\r\n            }\r\n            else{\r\n               // alert(\"You are Robot\"); recaptcha is failed\r\n            }\r\n\r\n        });\r\n        /** recaptcha code end */\r\n        const postBody = {\r\n            email: val.email,\r\n            password: val.password\r\n        }\r\n        document.getElementById(\"submitting\").innerText=\"Logging User...Please wait\";\r\n        document.getElementById(\"submitting\").disabled=true;            \r\n        dispatch(loginUser(postBody)); \r\n\r\n    }  \r\n    useEffect(()=>{\r\n        if(userInfo){\r\n            navigate(\"/\")\r\n        }\r\n    },[userInfo]);\r\n\r\n  return (\r\n    <Container>\r\n        <center><Avatar style={{alignItems:'center'}} sx={{ bgcolor: deepOrange[500] }} /></center>\r\n            <Typography variant=\"h5\" style={{textAlign:'center'}}><Ptags>(All the field having * are required)</Ptags></Typography>\r\n            {loading && <Loading />}\r\n            {/* <Form metod=\"post\" onSubmit={(e) =>{ onSubmit(e)}}> */}\r\n                <FormControl>\r\n                    <TextField value={formik.values.email} \r\n                            required='required'\r\n                            id=\"email\"\r\n                            name=\"email\" \r\n                           // label=\"Email\"  \r\n                            label={<EmailIcon />} \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email} />\r\n                </FormControl> \r\n                <FormControl>\r\n                    <TextField value={formik.values.password} \r\n                            required='required' \r\n                            id='password' \r\n                            name='password' \r\n                            //label=\"Password\"  \r\n                            label={<LockIcon />}\r\n                            onChange={formik.handleChange} \r\n                            /* inputProps={{ maxLength: 50 }} */\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password} \r\n                            type={values.showPassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}} />\r\n                </FormControl> \r\n                {/** recaptcha code begins  */}\r\n                <FormControl>\r\n                    <ReCAPTCHA sitekey={process.env.REACT_APP_SITE_KEY} \r\n                               theme='light' \r\n                               ref={captchaRef} // eslint-disable-next-line no-unused-expressions\r\n                               onChange={(e) => {formik.handleChange;formik.setFieldValue( \"recaptcha\", 'formikchanges')}} \r\n                               />\r\n                <Spanning id=\"captcha-error\">{(formik.touched.recaptcha && formik.errors.recaptcha)?<div>{formik.errors.recaptcha}</div>:null}</Spanning>\r\n                </FormControl>      \r\n                {/** recaptcha code ends */}\r\n                <FormControl>\r\n                    <Buttons variant=\"contained\" type=\"submit\" id=\"submitting\" onClick={formik.handleSubmit}>Login</Buttons>\r\n                </FormControl><p></p>\r\n                <Link to=\"/sign-up\" reloadDocument style={{textDecoration:'none',color:'Highlight'}}>Do not have an account sign up!!</Link>\r\n    </Container>\r\n  \r\n  )\r\n}\r\n\r\nexport default Login;\r\n\r\nconst Container = styled(FormGroup)`\r\nwidth: 30%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 .8rem;\r\n`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 100%;\r\n`\r\n","import axios from \"axios\";\r\nimport { /*http,*/getAPIUrlOrders,getToken } from \"../utils/localStorage\";\r\naxios.defaults.withCredentials=true;\r\n\r\nexport const createOrder = async(order) => {\r\n        // different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = {\r\n                                headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                        Authorization: `Bearer ${getToken()}`,\r\n                                },\r\n                  };\r\n\r\n        return await axios.post(`${getAPIUrlOrders()}/createOrders`,order,config);\r\n}\r\nexport const listAllOrder = async(pageNumber) => {\r\n        const config = {\r\n                headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getToken()}`,\r\n                },\r\n        };\r\n        return await axios.get(`${getAPIUrlOrders()}/listOrders?pageNumber=${pageNumber}`,config);\r\n}\r\nexport const getOrderDetail = async(orderID) => {\r\n        // different headers are used when it is a social login, and when it is a std email login\r\n\t\tconst config = {\r\n                        headers: {\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: `Bearer ${getToken()}`,\r\n                        },\r\n          };\r\n        return await axios.get(`${getAPIUrlOrders()}/getOrderDetails/${orderID}`,config);\r\n}\r\nexport const payOrder = async(orderID, paymentResult) => {\r\n        //alert(orderID+'--'+JSON.stringify(paymentResult));\r\n\t\tconst config = {\r\n                        headers: {\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: `Bearer ${getToken()}`,\r\n                        },\r\n          };\r\n        return await axios.put(`${getAPIUrlOrders()}/pay/${orderID}`,paymentResult,config);\r\n}\r\nexport const deliverOrder = async(orderID) => {\r\n        //alert(orderID+'--'+JSON.stringify(paymentResult));\r\n\t\tconst config = {\r\n                        headers: {\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: `Bearer ${getToken()}`,\r\n                        },\r\n          };\r\n        return await axios.put(`${getAPIUrlOrders()}/deliver/${orderID}`,config);\r\n}\r\nexport const listMyOrder = async() => {\r\n        \r\n        const config = {\r\n                headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getToken()}`,\r\n                },\r\n        };\r\n        return await axios.get(`${getAPIUrlOrders()}/myorders`,config);\r\n}\r\nexport const stripeRequest = async(postBody) => {\r\n        const config={\r\n                headers: {\r\n                        'Content-Type': 'application/json',\r\n                },\r\n        }\r\n        return await axios.post(`${getAPIUrlOrders()}/stripe-payment`,postBody,config);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","export const ORDER_CREATE_REQUEST = 'ORDER_CREATE_REQUEST';\r\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS';\r\nexport const ORDER_CREATE_FAIL = 'ORDER_CREATE_FAIL';\r\nexport const ORDER_CREATE_RESET = 'ORDER_CREATE_RESET';\r\n\r\nexport const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST';\r\nexport const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS';\r\nexport const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL';\r\n\r\nexport const ORDER_PAY_REQUEST = 'ORDER_PAY_REQUEST';\r\nexport const ORDER_PAY_SUCCESS = 'ORDER_PAY_SUCCESS';\r\nexport const ORDER_PAY_FAIL = 'ORDER_PAY_FAIL';\r\nexport const ORDER_PAY_RESET = 'ORDER_PAY_RESET';\r\n\r\nexport const ORDER_DELIVER_REQUEST = 'ORDER_DELIVER_REQUEST';\r\nexport const ORDER_DELIVER_SUCCESS = 'ORDER_DELIVER_SUCCESS';\r\nexport const ORDER_DELIVER_FAIL = 'ORDER_DELIVER_FAIL';\r\nexport const ORDER_DELIVER_RESET = 'ORDER_DELIVER_RESET';\r\n\r\nexport const ORDER_ALL_LIST_REQUEST = 'ORDER_ALL_LIST_REQUEST';\r\nexport const ORDER_ALL_LIST_SUCCESS = 'ORDER_ALL_LIST_SUCCESS';\r\nexport const ORDER_ALL_LIST_FAIL = 'ORDER_ALL_LIST_FAIL';\r\n\r\nexport const ORDER_MY_LIST_REQUEST = 'ORDER_MY_LIST_REQUEST';\r\nexport const ORDER_MY_LIST_SUCCESS = 'ORDER_MY_LIST_SUCCESS';\r\nexport const ORDER_MY_LIST_FAIL = 'ORDER_MY_LIST_FAIL';\r\nexport const ORDER_MY_LIST_RESET = 'ORDER_MY_LIST_RESET';\r\n","import {createOrder,listAllOrder,getOrderDetail,payOrder,deliverOrder,listMyOrder} from '../../routes/orderRoutes';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n\tORDER_CREATE_REQUEST,\r\n\tORDER_CREATE_SUCCESS,\r\n\tORDER_CREATE_FAIL,\r\n\tORDER_DETAILS_REQUEST,\r\n\tORDER_DETAILS_SUCCESS,\r\n\tORDER_DETAILS_FAIL,\r\n\tORDER_PAY_REQUEST,\r\n\tORDER_PAY_SUCCESS,\r\n\tORDER_PAY_FAIL,\r\n\tORDER_DELIVER_REQUEST,\r\n\tORDER_DELIVER_SUCCESS,\r\n\tORDER_DELIVER_FAIL,\r\n\tORDER_ALL_LIST_REQUEST,\r\n\tORDER_ALL_LIST_SUCCESS,\r\n\tORDER_ALL_LIST_FAIL,\r\n\tORDER_MY_LIST_REQUEST,\r\n\tORDER_MY_LIST_SUCCESS,\r\n\tORDER_MY_LIST_FAIL\r\n} from '../actionTypes/orderConstants';\r\n\r\n\r\n// get all the details about the order and dispatch only of currently logged in\r\nexport const createOrders = (order) => async (dispatch, getState) => {\r\n\t\tdispatch({ type: ORDER_CREATE_REQUEST });\r\n\r\n\t\tawait createOrder(order).then(response => {\r\n\r\n\t\t\tdispatch({ type: ORDER_CREATE_SUCCESS, payload: response.data });\r\n\t\t\tif(response.status===201)\r\n\t\t\t{\r\n\t\t\t\ttoast.success('Order Created Successfully!', {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: ORDER_CREATE_FAIL,\r\n\t\t\t\t\tpayload:response.message,\r\n\t\t\t\t});\r\n\t\t\t\ttoast.success(response.message, {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}).catch ((error) =>  {\r\n\t\t\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_CREATE_FAIL,\r\n\t\t\t\tpayload:error.message,\r\n\t\t\t});\r\n\t\t\ttoast.success(error.message, {\r\n\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\thideProgressBar: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t});\r\n\t\t});\r\n}\r\n// list all orders for the admin panel view, include the pagenumber being fetched\r\nexport const listAllOrders = () =>async (dispatch, getState) => {\r\n\r\n\tdispatch({ type: ORDER_ALL_LIST_REQUEST });\r\n\tawait listAllOrder().then(response => {\r\n\r\n\t\tdispatch({ type: ORDER_ALL_LIST_SUCCESS, payload: response.data });\r\n\t\tif(response.status===201)\r\n\t\t{\r\n\t\t\t/*toast.success('Listing of order at admin panel is showing Successfully!', {\r\n\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\thideProgressBar: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t});*/\r\n\t\t}\r\n\t\telse{\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_ALL_LIST_FAIL,\r\n\t\t\t\tpayload:response.message,\r\n\t\t\t});\r\n\t\t\ttoast.success(response.message, {\r\n\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\thideProgressBar: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t});\r\n\t\t}\r\n\t}).catch ((error) =>  {\r\n\t\r\n\t\tdispatch({\r\n\t\t\ttype: ORDER_ALL_LIST_FAIL,\r\n\t\t\tpayload:error.message,\r\n\t\t});\r\n\t\ttoast.success(error.message, {\r\n\t\t\tposition: \"bottom-right\",\r\n\t\t\thideProgressBar: false,\r\n\t\t\tprogress: undefined,\r\n\t\t});\r\n\t});\r\n\r\n};\r\n// get details about a particular order\r\nexport const getOrderDetails = (orderID) => async (dispatch, getState) => {\r\n\t\tdispatch({ type: ORDER_DETAILS_REQUEST });\r\n\r\n\t\tawait getOrderDetail(orderID).then(response => {\r\n\r\n\t\t\tdispatch({ type: ORDER_DETAILS_SUCCESS, payload: response.data });\r\n\t\t\tif(response.status===201)\r\n\t\t\t{\r\n\t\t\t\t/*toast.success('Order details is showing Successfully!', {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});*/\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: ORDER_DETAILS_FAIL,\r\n\t\t\t\t\tpayload:response.message,\r\n\t\t\t\t});\r\n\t\t\t\ttoast.success(response.message, {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}).catch ((error) =>  {\r\n\t\t\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_DETAILS_FAIL,\r\n\t\t\t\tpayload:error.message,\r\n\t\t\t});\r\n\t\t\ttoast.success(error.message, {\r\n\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\thideProgressBar: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t});\r\n\t\t});\r\n};\r\n\r\n// update the current order to that of a paid one, and store the correct payment result\r\nexport const payOrders = (orderID, paymentResult) => async (dispatch, getState) => {\r\n\t\t\tdispatch({ type: ORDER_PAY_REQUEST });\r\n\r\n\t\t\tawait payOrder(orderID,paymentResult).then(response => {\r\n\r\n\t\t\t\tdispatch({ type: ORDER_PAY_SUCCESS, payload: response.data });\r\n\t\t\t\tif(response.status===201)\r\n\t\t\t\t{\r\n\t\t\t\t\ttoast.success('Payment is Made Successfully!', {\r\n\t\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: ORDER_PAY_FAIL,\r\n\t\t\t\t\t\tpayload:response.message,\r\n\t\t\t\t\t});\r\n\t\t\t\t\ttoast.success(response.message, {\r\n\t\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}).catch ((error) =>  {\r\n\t\t\t\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: ORDER_PAY_FAIL,\r\n\t\t\t\t\tpayload:error.message,\r\n\t\t\t\t});\r\n\t\t\t\ttoast.success(error.message, {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\r\n\t};\r\n\r\n// Set the current order as delivered, only when logged in user is an admin\r\nexport const deliverOrders = (orderID) => async (dispatch, getState) => {\r\n\tdispatch({ type: ORDER_DELIVER_REQUEST });\r\n\t\tawait deliverOrder(orderID).then(response => {\r\n\r\n\t\t\tdispatch({ type: ORDER_DELIVER_SUCCESS, payload: response.data });\r\n\t\t\tif(response.status===201)\r\n\t\t\t{\r\n\t\t\t\ttoast.success('Current order is marked delivered Successfully!', {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: ORDER_DELIVER_FAIL,\r\n\t\t\t\t\tpayload:response.message,\r\n\t\t\t\t});\r\n\t\t\t\ttoast.success(response.message, {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}).catch ((error) =>  {\r\n\t\t\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_DELIVER_FAIL,\r\n\t\t\t\tpayload:error.message,\r\n\t\t\t});\r\n\t\t\ttoast.success(error.message, {\r\n\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\thideProgressBar: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t});\r\n\t\t});\r\n};\r\n\r\n// list all the orders of a particular user\r\nexport const listMyOrders = (userId) => async (dispatch, getState) => {\r\n\t\tdispatch({ type: ORDER_MY_LIST_REQUEST });\r\n\t\tawait listMyOrder(userId).then(response => {\r\n\r\n\t\t\tdispatch({ type: ORDER_MY_LIST_SUCCESS, payload: response.data });\r\n\t\t\tif(response.status===201)\r\n\t\t\t{\r\n\t\t\t\t/*toast.success('Listing of order is showing Successfully!', {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});*/\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: ORDER_MY_LIST_FAIL,\r\n\t\t\t\t\tpayload:response.message,\r\n\t\t\t\t});\r\n\t\t\t\ttoast.success(response.message, {\r\n\t\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\t\thideProgressBar: false,\r\n\t\t\t\t\tprogress: undefined,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}).catch ((error) =>  {\r\n\t\t\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: ORDER_MY_LIST_FAIL,\r\n\t\t\t\tpayload:error.message,\r\n\t\t\t});\r\n\t\t\ttoast.success(error.message, {\r\n\t\t\t\tposition: \"bottom-right\",\r\n\t\t\t\thideProgressBar: false,\r\n\t\t\t\tprogress: undefined,\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n};\r\n\r\n\r\n","// there is a need to convert mongodb dates to readable date formats in various pages\r\n// this util function does that, and has a second argument to decide whether the time has to be included\r\nconst getDateString = (date, showTime = true) => {\r\n\tconst options = {\r\n\t\tyear: 'numeric',\r\n\t\tmonth: 'short',\r\n\t\tday: 'numeric',\r\n\t};\r\n\tconst timeStr = new Date(date).toLocaleTimeString('en', {\r\n\t\ttimeStyle: 'short',\r\n\t\thour12: true,\r\n\t\ttimeZone: 'IST',\r\n\t});\r\n\r\n\tlet result = '';\r\n\tif (showTime) result += `${timeStr} `;\r\n\treturn result + new Date(date).toLocaleDateString('en', options);\r\n};\r\n\r\nexport default getDateString;\r\n","import React,{ useEffect } from 'react';\r\nimport {  Container,Typography,FormGroup,FormControl,TextField,Button,FormControlLabel,InputLabel,Select,MenuItem,FormLabel,RadioGroup, Radio,Avatar ,ImageListItem,ImageList,InputAdornment,IconButton,TablePagination,Alert,Stack,Paper} from '@mui/material';\r\nimport Grid from '@mui/material/Unstable_Grid2';\r\nimport { styled } from '@mui/material/styles';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { Table, Row, Col } from 'react-bootstrap';\r\nimport { useState } from 'react';\r\nimport Loading from \"../layout/Loading\";\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport { useNavigate,useParams } from 'react-router-dom';\r\nimport { useFormik } from 'formik'; \r\nimport * as Yup from 'yup';\r\nimport { deepOrange } from '@mui/material/colors';\r\nimport '../../hide.css';\r\nimport {updateUser} from '../../store/actions/authActions';\r\nimport { listMyOrders } from '../../store/actions/orderActions';\r\nimport getDateString from '../../utils/getDateString';\r\n\r\nconst Profile = () => {\r\n\r\n    const Item = styled(Paper)(({ theme }) => ({\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n        ...theme.typography.body2,\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    }));\r\n    const [name,setName] = useState('');\r\n    const [occupation,setOccupation] = useState('');\r\n    const [email,setEmail] = useState('');\r\n    const [phone,setPhone] = useState('');\r\n    const [description,setDescription] = useState('');\r\n    const [gender,setGender] = useState('');\r\n    const [age,setAge] = useState('');\r\n    const [isAdmin,setIsadmin] = useState(false);\r\n    const [image,setImage] = useState('');\r\n    const [imagePreview,setImagePreview] = useState('');\r\n    const [spinner,setSpinner] = useState(true);\r\n    const [values, setValues] = useState({showPassword: false});\r\n    const [valuesRe, setValuesRe] = useState({showRePassword: false});\r\n    const [dataPage, setDataPage] = useState(0);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(2);\r\n    \r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const {id} = useParams();\r\n    const userUpdateProfile = useSelector((state) => state.userUpdateProfile);\r\n    let { loading, success } = userUpdateProfile;\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n    //listing my orders\r\n    const orderListMy = useSelector((state) => state.orderListMy);\r\n    const {loading:orderLoading, error:orderError, orders} = orderListMy;\r\n    const count=orders?.length;\r\n    const handleChangePage = (event, newPage) => setPage(newPage);\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(parseInt(event.target.value, 2));\r\n      setPage(0);\r\n    };\r\n    //image handling\r\n    const handleProductImageUpload = (e) => {\r\n        const file = e.target.files[0];\r\n    \r\n        TransformFileData(file);\r\n    };\r\n    //reading image using The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.\r\n    const TransformFileData = (file) => {\r\n        const reader = new FileReader();\r\n     //   formik.errors.image=null;\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n          reader.onloadend = () => {\r\n            document.getElementById(\"pic\").src = reader.result;\r\n            setImage(reader.result);\r\n            setImagePreview(\"\");\r\n          };\r\n        } else {\r\n            setImage(\"\");\r\n        }\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n    const handleClickShowRePassword = () => {\r\n        setValuesRe({ ...valuesRe, showRePassword: !valuesRe.showRePassword });\r\n    };\r\n    let savedValues = {\r\n                name: name,\r\n                occupation: occupation,\r\n                email: email,\r\n                password: '',\r\n                repassword:'',\r\n                phone: phone,\r\n                description: description,\r\n                age: age,\r\n                gender: gender,\r\n                isAdmin:isAdmin,\r\n                image:imagePreview\r\n\r\n    }\r\n    const initialValues ={\r\n        name:'',\r\n        occupation:'',\r\n        email:'',\r\n        password:'',\r\n        repassword:'',\r\n        phone:'',\r\n        description:'',\r\n        age:'',\r\n        gender:'',\r\n        image:'',\r\n        isAdmin:''\r\n  }\r\n    const schema = Yup.object({\r\n        name:    Yup.string()\r\n                    .required('Name is required!')\r\n                    .min(3, 'Name should have of minimum 3 characters')\r\n                    .max(50, 'Name should have of minimum 30 characters'),\r\n        occupation: Yup.string()\r\n                    .required(\"Occupation is required!\")\r\n                    .min(3,\"Occupation should have minimum 3 characters!\")\r\n                    .max(30,\"Occupation should have maximum 30 characters!\"),\r\n        email: Yup.string()\r\n                    .required(\"Email is required!\")\r\n                    .email(\"Email is invalid!\")\r\n                    .min(8,'Email should have of minimum 8 characters length!'),\r\n        password: Yup.string()\r\n                    .min(8, 'Password should be of minimum 6 characters length')\r\n                    .max(30, 'Password should be of minimum 30 characters length')\r\n                    .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/, 'Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters.'),\r\n        repassword: Yup.string('')\r\n                    .min(8, 'Re Password should be of minimum 6 characters length')\r\n                    .max(30, 'Re Password should be of minimum 30 characters length')\r\n                    .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/, 'Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters.')\r\n                    .when('password', {\r\n                    is: (val) => !!(val && val.length > 0),\r\n                    then: Yup.string().oneOf(\r\n                        [Yup.ref('password')],\r\n                        'Password and Retype Password do not match')\r\n                    }),                        \r\n        phone: Yup.string()\r\n                    .required(\"Phone is required!\")\r\n                    .min(10,\"Phone should have minimum 10 digits!\"),\r\n        description: Yup.string()\r\n                    .required(\"Description is required!\")\r\n                    .min(3,\"Descrition should have minimum 3 characters!\")\r\n                    .max(1500,\"Descrition should have maximum 1500 characters!\"),\r\n        age:         Yup.string()\r\n                        .required(\"Age is required!\"),       \r\n        gender:     Yup.string()\r\n                    .required(\"Please select a gender!\"),               \r\n        /*image: Yup.mixed()\r\n                .nullable()\r\n                .required(\"Image is required!\")\r\n                .test('type',  \"We only support jpeg/jpg/png/bmp formats\", function (value) {\r\n                    //alert('Here='+value.type)\r\n                    return value && (value.type === \"image/jpeg\" || \r\n                                    value.type === \"image/bmp\" || \r\n                                    value.type === \"image/jpg\" || \r\n                                    value.type === \"image/png\")}),\r\n        recaptcha : Yup.string()\r\n                    .required(\"Please confirm that you are not a robot, to select checkbox!\") */                          \r\n    })\r\n    const formik = useFormik({\r\n        initialValues: (savedValues || initialValues),\r\n        validationSchema: schema,\r\n        enableReinitialize:true,  //this variable must be true if data comes from API\r\n        onSubmit: (values,{resetForm}) => {\r\n            onUpdateProfile(values,resetForm);\r\n        }\r\n    })\r\n    \r\n    const onUpdateProfile = (val) => {\r\n        const postBody = {\r\n            name:val.name,\r\n            occupation: val.occupation,\r\n            email:val.email,\r\n            password:val.password,\r\n            phone: val.phone,\r\n            description: val.description,\r\n            age:val.age,\r\n            gender:val.gender,            \r\n            isAdmin:isAdmin,\r\n            image:image\r\n        }\r\n      //  alert(JSON.stringify(postBody));return;\r\n        document.getElementById(\"submitting\").innerText = \"Updating Profile...Please wait!\";\r\n        document.getElementById(\"submitting\").disabled  = true;\r\n        dispatch(updateUser(postBody,id,userInfo._id));\r\n           \r\n    }\r\n    useEffect(() => {\r\n            setSpinner(false);\r\n            //alert(userInfo.image.url);\r\n            setName(userInfo.name);\r\n            setOccupation(userInfo.occupation);\r\n            setEmail(userInfo.email);\r\n            setPhone(userInfo.phone);\r\n            setDescription(userInfo.description);\r\n            setGender(userInfo.gender);\r\n            setAge(userInfo.age);\r\n            setIsadmin(userInfo.isAdmin);\r\n            setImagePreview(userInfo.image.url);\r\n        \r\n    },[]);  \r\n    // get my orders by pagenumber\r\n\tuseEffect(() => {\r\n\t\tif (userInfo) dispatch(listMyOrders(userInfo._id));\r\n\t\telse navigate('/login');\r\n                setPage(0); \r\n\t}, [dispatch,  userInfo, dataPage]);\r\n  return (\r\n  \r\n<Containers>\r\n    <Grid container spacing={1}>\r\n      <Grid xs={5}>\r\n          <Item><center>\r\n           <FormContainer style={\r\n            userInfo && !userInfo.isConfirmed\r\n                ? {\r\n                        opacity: '0.5',\r\n                        pointerEvents: 'none',\r\n                }\r\n                : {\r\n                        opacity: '1',\r\n                        pointerEvents: '',\r\n                }\r\n            }>\r\n            <center><Avatar style={{alignItems:'center'}} sx={{ bgcolor: deepOrange[500] }} /></center>\r\n            <Typography variant=\"h5\" style={{textAlign:'center'}}>Update Profile <Ptags>(All the field having * are required)</Ptags></Typography>{userUpdateProfile.profile}\r\n            {(loading && <Loading />) || (spinner===true && <Loading />)} {(success && navigate(\"/\"))} \r\n            {userInfo && !userInfo.isConfirmed ? (\r\n                <Stack sx={{ width: '100%' }} spacing={2}>\r\n                    <Alert severity=\"info\">\r\n                        Your Account has been Created! Please check your email to verify your account and start shopping\r\n                    </Alert>\r\n                </Stack>\r\n                ) : null\r\n            }\r\n            <FormControl>\r\n                    <TextField \r\n                            value={formik.values.name} \r\n                            required='required'\r\n                            id=\"name\"\r\n                            name=\"name\" \r\n                            label=\"Name\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            helperText={formik.touched.name && formik.errors.name} \r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField value={formik.values.occupation} \r\n                               label=\"Occupation\" \r\n                               name=\"occupation\" \r\n                               onChange={formik.handleChange} required \r\n                               error={formik.touched.occupation && Boolean(formik.errors.occupation)}\r\n                               helperText={formik.touched.occupation && formik.errors.occupation}\r\n                               />\r\n                </FormControl>                 \r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.email} \r\n                            required='required'\r\n                            id=\"email\"\r\n                            name=\"email\" \r\n                            label=\"Email\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email} \r\n                    /><Spanning id=\"email-error\"></Spanning>\r\n                </FormControl>\r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.password} \r\n                            required='required'\r\n                            id=\"password\"\r\n                            name=\"password\" \r\n                            label=\"Password\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password} \r\n                            type={values.showPassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}}\r\n                    />\r\n                </FormControl> \r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.repassword} \r\n                            required='required'\r\n                            id=\"repassword\"\r\n                            name=\"repassword\" \r\n                            label=\"RePassword\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.repassword && Boolean(formik.errors.repassword)}\r\n                            helperText={formik.touched.repassword && formik.errors.repassword} \r\n                            type={valuesRe.showRePassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowRePassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {valuesRe.showRePassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}}\r\n                    />\r\n                </FormControl> \r\n                <FormControl>\r\n                    <TextField value={formik.values.phone} \r\n                               required\r\n                               label=\"Phone\" \r\n                               name=\"phone\" \r\n                               onChange={formik.handleChange} \r\n                               type=\"number\" \r\n                               onInput = {(e) =>{e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0,10)}}  \r\n                               error={formik.touched.phone && Boolean(formik.errors.phone)}\r\n                               helperText={formik.touched.phone && formik.errors.phone}\r\n                               />\r\n                </FormControl>     \r\n                <FormControl>\r\n                    <TextField value={formik.values.description} \r\n                               label=\"Description\" \r\n                               name=\"description\" \r\n                               onChange={formik.handleChange} required \r\n                               multiline\r\n                               rows={4}\r\n                               error={formik.touched.description && Boolean(formik.errors.description)} \r\n                               helperText={formik.touched.description && formik.errors.description}/>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel label=\"Age\" required error={formik.touched.age && Boolean(formik.errors.age)} \r\n                               helperText={formik.touched.age && formik.errors.age} >Age</InputLabel>\r\n                    <Select value={formik.values.age} \r\n                               label=\"Age\" \r\n                               name=\"age\" \r\n                               onChange={formik.handleChange} required \r\n                               error={formik.touched.age && Boolean(formik.errors.age)} \r\n                               helperText={formik.touched.age && formik.errors.age}>\r\n                        <MenuItem value=\"10\">10 Years</MenuItem>\r\n                        <MenuItem value=\"20\">20 Years</MenuItem> \r\n                        <MenuItem value=\"30\">30 Years</MenuItem> \r\n                        <MenuItem value=\"40\">40 Years</MenuItem>     \r\n                        <MenuItem value=\"50\">50 Years</MenuItem>\r\n                        <MenuItem value=\"60\">60 Years</MenuItem> \r\n                        <MenuItem value=\"70\">70 Years</MenuItem> \r\n                        <MenuItem value=\"80\">80 Years</MenuItem>\r\n                    </Select>       \r\n                </FormControl>  \r\n                <Spannings id=\"age-error\">{(formik.touched.age && formik.errors.age)?<div>{formik.errors.age}</div>:''}   </Spannings>                 \r\n                <FormControl  className=\"fieldset\">\r\n                    <FormLabel  required error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                        helperText={formik.touched.gender && formik.errors.gender} style={{textAlign:'left',fontSize:'13px'}}>Gender</FormLabel>\r\n                    <RadioGroup\r\n                        value={formik.values.gender}\r\n                        row\r\n                        name=\"gender\" // eslint-disable-next-line no-unused-expressions \r\n                        onChange={(e) => {formik.handleChange;formik.setFieldValue(\"gender\",e.currentTarget.value)}}\r\n                        required \r\n                       /* error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                        helperText={formik.touched.gender && formik.errors.gender*}*/>\r\n                        <FormControlLabel style={{textAlign:'left',fontSize:'10px'}}\r\n                                value=\"Male\"\r\n                                control={<Radio />} \r\n                                label=\"Male\" \r\n                                />\r\n                        <FormControlLabel style={{textAlign:'left',fontSize:'10px'}}\r\n                                value=\"Female\"\r\n                                control={<Radio />} \r\n                                label=\"Female\" \r\n                                />\r\n                    </RadioGroup>\r\n                 </FormControl>         \r\n                 <Spannings id=\"gender-error\">{(formik.touched.gender && formik.errors.gender)?<div>{formik.errors.gender}</div>:''}   </Spannings>                  \r\n                <FormControl>                                \r\n                    <ImageList>\r\n                        \r\n                        <Ptags ><Typography style={{fontSize:'15px',textAlign:'left'}}>Choose an image</Typography>\r\n                                    <input\r\n                                    id=\"image\"\r\n                                    accept=\"image/*\"\r\n                                    name=\"image\"\r\n                                    type=\"file\"\r\n                                    onChange={(e) => {handleProductImageUpload(e);formik.setTouched({\r\n                                        ...formik.touched.image\r\n                                      });formik.setFieldValue( \"image\", e.target.files[0] )}}\r\n                                    />\r\n                        </Ptags>\r\n                                <ImagePreview>\r\n                                    {(image || (imagePreview)) ? (\r\n                                    <>\r\n                                        <div><img src={imagePreview?imagePreview:image} alt=\"error!\" id=\"pic\"/></div>\r\n                                    </>\r\n                                    )  : (\r\n                                    <p>Product image upload preview will appear here!</p>\r\n                                    )}\r\n                                </ImagePreview>\r\n                    </ImageList>\r\n                    <Spannings id=\"iamges\">{(formik.touched.image && formik.errors.image)?<div>{formik.errors.image}</div>:null}</Spannings>\r\n                </FormControl>  \r\n                <FormControl>\r\n                    <Buttons variant=\"contained\" type=\"submit\" id=\"submitting\" onClick={(e) => formik.handleSubmit()}>Update Profile</Buttons>\r\n                </FormControl>\r\n          </FormContainer>\r\n          </center>\r\n          </Item>\r\n          </Grid><Grid xs={7}>\r\n                    <Item>\r\n                        <>\r\n                        <Row className='align-items-center'>\r\n                                <Col>\r\n                                <center><h4>All Orders ({`${count || 0}`})</h4></center>\r\n                                </Col>\r\n                        </Row>\r\n                        {orderLoading ? (\r\n                                <Loading />\r\n                        ) : orderError ? (\r\n                                <Spanning dismissible variant='danger' duration={10}>\r\n                                        {orderError}\r\n                                </Spanning>\r\n                        ) : (\r\n                            <Table\r\n                                striped\r\n                                bordered\r\n                                responsive\r\n                                className='table-sm text-center'>\r\n                                    <thead className='fonts' >\r\n                                        <tr>\r\n                                            <th>ID</th>\r\n                                            <th>Total</th>\r\n                                            <th>Date</th>\r\n                                            <th>Paid</th>\r\n                                            <th>Delievred</th>\r\n                                            <th>Action</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {orders && orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((order) => {\r\n                                        return (\r\n                                                <tr key={order._id}>\r\n                                                        <td>{order._id}</td>\r\n                                                        <td>\r\n                                                                {order.totalPrice.toLocaleString(\r\n                                                                        'en-IN',\r\n                                                                        {\r\n                                                                                maximumFractionDigits: 2,\r\n                                                                                style: 'currency',\r\n                                                                                currency: 'INR',\r\n                                                                        }\r\n                                                                )}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                                {getDateString(order.createdAt)}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                                {order.isPaid ? (\r\n                                                                        getDateString(order.paidAt)\r\n                                                                ) : (\r\n                                                                        <i\r\n                                                                            className='fas fa-times'\r\n                                                                            style={{\r\n                                                                                    color: 'red',\r\n                                                                                }}\r\n                                                                        />\r\n                                                                )}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                                {order.isDelivered ? (\r\n                                                                        getDateString(order.deliveredAt)\r\n                                                                ) : (\r\n                                                                        <i\r\n                                                                                className='fas fa-times'\r\n                                                                                style={{\r\n                                                                                        color: 'red',\r\n                                                                                }}\r\n                                                                        />\r\n                                                                )}\r\n                                                        </td>\r\n                                                        <td\r\n                                                                style={{\r\n                                                                        display: 'flex',\r\n                                                                        alignItems: 'center',\r\n                                                                        justifyContent: 'space-around',\r\n                                                                }}>\r\n                                                                <a style={{color:'white',textDecoration: 'none'}} className='btn btn-success btn-sm' href={`/order/${order._id}`}>\r\n                                                                        \r\n                                                                                View Details\r\n                                                                       \r\n                                                                </a>\r\n                                                        </td>\r\n                                                </tr>\r\n                                        );\r\n                                        })}\r\n                                    </tbody>\r\n                                </Table>)}\r\n                                <TablePagination\r\n                                        rowsPerPageOptions={[0]}\r\n                                        component=\"div\"\r\n                                        count={count}\r\n                                        rowsPerPage={rowsPerPage}\r\n                                        page={page}\r\n                                        onPageChange={handleChangePage}\r\n                                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                                />\r\n                        \r\n                        \r\n                        </>\r\n                    </Item>\r\n                </Grid>\r\n        </Grid> \r\n</Containers>   \r\n  )\r\n}\r\n\r\nexport default Profile;\r\nconst Containers = styled(Container)`\r\nmargin: 2% auto 2% auto;\r\n`\r\nconst FormContainer = styled(FormGroup)`\r\nwidth: 65%;\r\nmargin: 4% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n    \r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: red;\r\nfont-size:12px;\r\n`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 70%;\r\n`\r\nconst ImagePreview = styled(ImageListItem)`\r\n  border: 1px solid rgb(183, 183, 183);\r\n  max-width: 100px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: rgb(78, 78, 78);\r\n\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n`\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\n`\r\nconst Error =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:12px;\r\nfont-weight:bold;\r\nbackground-color:red;\r\n`\r\n\r\n","import React from 'react';\r\nimport { Typography,FormGroup,styled } from '@mui/material';\r\n\r\n//import swal from 'sweetalert';\r\n\r\nconst Container = styled(FormGroup)`\r\nwidth: 30%;\r\nmargin: 18% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\n \r\nconst Logout = () => {\r\n  return (\r\n    <Container>\r\n            <Typography variant=\"h5\">User Logged out successfully</Typography>\r\n            {/* <Form metod=\"post\" onSubmit={(e) =>{ onSubmit(e)}}> */}\r\n    </Container>\r\n  \r\n  )\r\n}\r\n\r\nexport default Logout;","import React, { useState } from 'react';\r\nimport { Image } from 'react-bootstrap';\r\n\r\nconst ImageMagnifier = ({\r\n\tsrc,\r\n\talt,\r\n\ttitle,\r\n\twidth,\r\n\theight,\r\n\tmagnifierHeight = 250,\r\n\tmagnifieWidth = 250,\r\n\tzoomLevel = 2.5,\r\n}) => {\r\n\tconst [[x, y], setXY] = useState([0, 0]);\r\n\tconst [[imgWidth, imgHeight], setSize] = useState([0, 0]);\r\n\tconst [showMagnifier, setShowMagnifier] = useState(false);\r\n\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\t\tposition: 'relative',\r\n\t\t\t\theight: height,\r\n\t\t\t\twidth: width,\r\n\t\t\t}}>\r\n\t\t\t<Image\r\n\t\t\t\tclassName='product-image'\r\n\t\t\t\tsrc={src}\r\n\t\t\t\tstyle={{ height: height, width: width }}\r\n\t\t\t\tfluid\r\n\t\t\t\ttitle={title}\r\n\t\t\t\tonMouseEnter={(e) => {\r\n\t\t\t\t\t// update image size and turn-on magnifier\r\n\t\t\t\t\tconst elem = e.currentTarget;\r\n\t\t\t\t\tconst { width, height } = elem.getBoundingClientRect();\r\n\t\t\t\t\tsetSize([width, height]);\r\n\t\t\t\t\tsetShowMagnifier(true);\r\n\t\t\t\t}}\r\n\t\t\t\tonMouseMove={(e) => {\r\n\t\t\t\t\t// update cursor position\r\n\t\t\t\t\tconst elem = e.currentTarget;\r\n\t\t\t\t\tconst { top, left } = elem.getBoundingClientRect();\r\n\r\n\t\t\t\t\t// calculate cursor position on the image\r\n\t\t\t\t\tconst x = e.pageX - left - window.pageXOffset;\r\n\t\t\t\t\tconst y = e.pageY - top - window.pageYOffset;\r\n\t\t\t\t\tsetXY([x, y]);\r\n\t\t\t\t}}\r\n\t\t\t\tonMouseLeave={() => {\r\n\t\t\t\t\t// close magnifier\r\n\t\t\t\t\tsetShowMagnifier(false);\r\n\t\t\t\t}}\r\n\t\t\t\talt={alt}\r\n\t\t\t/>\r\n\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tdisplay: showMagnifier ? '' : 'none',\r\n\t\t\t\t\t// display: window.innerWidth <= 468 ? 'none' : '',\r\n\t\t\t\t\tposition: 'absolute',\r\n\t\t\t\t\t// prevent maginier blocks the mousemove event of img\r\n\t\t\t\t\tpointerEvents: 'none',\r\n\t\t\t\t\theight: `${magnifierHeight}px`,\r\n\t\t\t\t\twidth: `${magnifieWidth}px`,\r\n\t\t\t\t\t// move element center to cursor pos\r\n\t\t\t\t\ttop: `${y - magnifierHeight / 2.5}px`,\r\n\t\t\t\t\tleft: `${x - magnifieWidth / 2.5}px`,\r\n\t\t\t\t\topacity: '1', // reduce opacity so you can verify position\r\n\t\t\t\t\tborder: '1px solid lightgray',\r\n\t\t\t\t\tbackgroundColor: 'white',\r\n\t\t\t\t\tbackgroundImage: `url('${src}')`,\r\n\t\t\t\t\tbackgroundRepeat: 'no-repeat',\r\n\t\t\t\t\tborderRadius: '50%',\r\n\r\n\t\t\t\t\t//calculate zoomed image size\r\n\t\t\t\t\tbackgroundSize: `${imgWidth * zoomLevel}px ${\r\n\t\t\t\t\t\timgHeight * zoomLevel\r\n\t\t\t\t\t}px`,\r\n\r\n\t\t\t\t\t//calculete position of zoomed image.\r\n\t\t\t\t\tbackgroundPositionX: `${\r\n\t\t\t\t\t\t-x * zoomLevel + magnifieWidth / 2\r\n\t\t\t\t\t}px`,\r\n\t\t\t\t\tbackgroundPositionY: `${\r\n\t\t\t\t\t\t-y * zoomLevel + magnifierHeight / 2\r\n\t\t\t\t\t}px`,\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ImageMagnifier;\r\n","import React from 'react';\r\nimport {deleteUsers} from '../../store/actions/authActions';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport ImageMagnifier from '../cart/ImageMagnifier'; // to magnify image on hover\r\nimport Swal from 'sweetalert2';\r\nimport '../../hide.css';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Allusersrecord = ({Allusersrecord}) => {\r\n      const dispatch = useDispatch();\r\n      const deleteuser = (e,id) => {\r\n            if (window.confirm(\"Are you sure?\")) {\r\n              let targetSet = e.currentTarget;\r\n              targetSet.innerText='Deleting';\r\n               dispatch(deleteUsers(e,id));\r\n            }\r\n      }      \r\n    return (\r\n      <tr key={Allusersrecord._id}>\r\n          <td ><center><ImageMagnifier src={Allusersrecord.image.url} width=\"50px\" height=\"50px\" /></center></td>\r\n          <td>{Allusersrecord.name}</td>\r\n          <td>{Allusersrecord.occupation}</td>\r\n          <td>{Allusersrecord.email}</td>\r\n          <td>{Allusersrecord.phone}</td>\r\n          <td>{Allusersrecord.age}</td>\r\n          <td>{Allusersrecord.gender}</td>\r\n          <td>{Allusersrecord.isAdmin ===true ? 'Yes': 'No'}</td>          \r\n          <td><a style={{color:'white',textDecoration: 'none'}} className='btn btn-success btn-sm' href={`/userEditFromAdminId/${Allusersrecord._id}`} >Edit</a></td>\r\n          <td>\r\n            {Allusersrecord.isAdmin ?\r\n              <><button className='btn btn-danger btn-sm' onClick={(e) => deleteuser(e,Allusersrecord._id)}>Delete</button></>  : <><button className='btn btn-danger btn-sm' onClick={(e) => deleteuser(e,Allusersrecord._id)} >Delete</button></>  }\r\n          </td>    \r\n      </tr>\r\n    )\r\n}\r\nexport default Allusersrecord;","import React, {useEffect,useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {usersAll,userSearchs} from '../../store/actions/authActions';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Allusersrecord from './Allusersrecord';\r\nimport { FormLabel,TablePagination,styled} from '@mui/material';\r\nimport {getUser} from '../../utils/localStorage';\r\nimport { Table, Row, Col } from 'react-bootstrap';\r\nimport Loading from '../layout/Loading';\r\n\r\nconst Allusers = () => {\r\n  const dispatch = useDispatch();\r\n  const [searchNav,setSearch] = useState('');\r\n  const [loggedUserId,setLoggedUserId] = useState('');\r\n  const userAll = useSelector((state) => state.userAll);\r\n  const { loading,error,userInfo } = userAll;\r\n  const userSearch = useSelector((state) => state.userSearch);\r\n  let {userInfoBySearch} = userSearch;\r\n  const [dataPage, setDataPage] = useState(0);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(2);\r\n  let [users,setUsers] = useState('');\r\n  //const onDataPageChange = (event, page) => setDataPage(page - 1);\r\n\r\n  const handleChangePage = (event, newPage) => setPage(newPage);\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 2));\r\n    setPage(0);\r\n  };\r\n\r\n  const usersSearch = () => {\r\n    setUsers('');\r\n    const bodyNav = {\r\n       searchValue: searchNav \r\n    }\r\n     dispatch(userSearchs(bodyNav,loggedUserId));\r\n  }\r\n  const clearSearch = (e) => {\r\n    e.preventDefault();\r\n    document.getElementById('search').value='';\r\n    userInfoBySearch='';\r\n    setSearch('');\r\n    setUsers(userInfo);\r\n  }\r\n  useEffect(()=>{\r\n    const loggedUser = getUser();\r\n    setLoggedUserId(loggedUser._id)\r\n    dispatch(usersAll(loggedUser._id));\r\n    setPage(0); \r\n  },[dispatch,dataPage]);\r\n\r\n  let listContent;\r\n  let count=0;\r\n\r\n    if(loading) {\r\n        listContent = <tr><td colSpan='11'><h5>Loading...</h5></td></tr>//<div className=\"list-msg\"><Spinner/></div>;\r\n    }\r\n    else if(userInfo && !userInfoBySearch){\r\n        count=userInfo?.length;\r\n        {userInfo && userInfo.length>0 ?\r\n        (listContent = userInfo.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((stud) => (<Allusersrecord Allusersrecord={stud} />))) : (listContent = <tr><td colSpan='7'><h5>No record found</h5></td></tr>)}\r\n    }\r\n    else if(userInfoBySearch && !users){\r\n        count=userInfoBySearch?.length; \r\n        {userInfoBySearch && userInfoBySearch?.length>0 ?\r\n            (listContent = userInfoBySearch.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((stud) => (<Allusersrecord Allusersrecord={stud} />))) : (listContent = <tr><td colSpan='11'><h5>No record found</h5></td></tr>)}\r\n    }\r\n    else if(users){\r\n        count=users?.length; \r\n        {users && users?.length>0 ?\r\n            (listContent = users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((stud) => (<Allusersrecord Allusersrecord={stud} />))) : (listContent = <tr><td colSpan='11'><h5>No record found</h5></td></tr>)}\r\n    }\r\n  return (\r\n    <>\r\n    <Row className='align-items-center'>\r\n        <Col>\r\n            <center><h4>All Users ({`${count || 0}`})</h4></center>\r\n        </Col>\r\n    </Row>\r\n    {loading ? (\r\n                <Loading />\r\n        ) : error ? (\r\n                <Spanning dismissible variant='danger' duration={10}>\r\n                        {error}\r\n                </Spanning>\r\n        ) : \r\n        (\r\n            \r\n    <div className='container'>\r\n        <div className='row'>\r\n            <div className='col-md-12'>\r\n                <div className='card'>\r\n                    <div className='card-header'>\r\n                        <h4>Users Data\r\n                            <Link to={'/sign-up'} className=\"btn btn-primary btn-sm float-end\">Add User</Link>\r\n                        </h4>\r\n                    </div>\r\n                    <div  >\r\n                        <input\r\n                                id=\"search\"\r\n                                placeholder=\"Search…\"\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                                style={{marginLeft:'18px',marginTop:'5px'}}\r\n                                onChange={(e)=>setSearch(e.target.value)}\r\n                            /><SearchIcon onClick={usersSearch} />\r\n                        <Link onClick={(e) => clearSearch(e)} style={{textDecoration:'none',color:'black'}}>Clear</Link>\r\n                    </div>\r\n                    <Table\r\n                        striped\r\n                        bordered\r\n                        responsive\r\n                        className='table-sm text-center'>\r\n                            <thead className='fonts'>\r\n                                <tr><th >Image</th><th>Name</th><th>Occupation</th>\r\n                                    <th>Email</th><th>Phone</th><th>Age</th><th>Gender</th><th>Admin</th><th>Edit</th><th>Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {listContent}\r\n                            </tbody>\r\n                    </Table>\r\n                        <TablePagination\r\n                                rowsPerPageOptions={[0]}\r\n                                component=\"div\"\r\n                                count={count}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onPageChange={handleChangePage}\r\n                                onRowsPerPageChange={handleChangeRowsPerPage}\r\n                            />\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n       )\r\n    }\r\n    </>   \r\n    )\r\n};\r\n\r\nexport default Allusers;\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 .8rem;\r\n`\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst Message = ({ variant, duration, children, dismissible }) => {\r\n\tconst [visible, setVisible] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetVisible(true);\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (duration) {\r\n\t\t\tsetTimeout(() => setVisible(false), duration * 1000);\r\n\t\t}\r\n\t}, [duration]);\r\n\r\n\treturn (\r\n\t\t<Alert\r\n\t\t\tonClose={() => setVisible(false)}\r\n\t\t\tdismissible={dismissible}\r\n\t\t\tclassName='alert-custom'\r\n\t\t\tstyle={visible ? { display: 'block' } : { display: 'none' }}\r\n\t\t\tvariant={variant}>\r\n\t\t\t{children}\r\n\t\t</Alert>\r\n\t);\r\n};\r\n\r\nMessage.defaultProps = {\r\n\tvariant: 'info',\r\n\tdismissible: false,\r\n};\r\n\r\nexport default Message;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Alert,Stack } from '@mui/material';\r\nimport { Link,useNavigate,useParams } from 'react-router-dom';\r\nimport { Card } from 'react-bootstrap';\r\nimport Loading from '../layout/Loading';\r\nimport Message from '../Message';\r\nimport { confirmUsers } from '../../store/actions/authActions';\r\n\r\nconst Confirmuser = () => {\r\n        const {token} = useParams();\r\n\tconst dispatch = useDispatch();\r\n        const navigate = useNavigate();\r\n\tconst userConfirm = useSelector((state) => state.userConfirm); // get the userInfo to check if user is confirmed or not\r\n\tconst { loading, error, isConfirmed } = userConfirm;\r\n//alert(JSON.stringify(isConfirmed));return;\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (userInfo) {\r\n\t\t\tsetIsLoggedIn(true);\r\n\t\t} else {\r\n\t\t\tsetIsLoggedIn(false);\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\t// confirm user once the email token is available\r\n\t\tdispatch(confirmUsers(token, isLoggedIn));\r\n\t}, [dispatch,  isLoggedIn]);\r\n       // alert(isLoggedIn)\r\n\tif (loading && (!isConfirmed )) {\r\n\t\treturn <Loading />;\r\n\t\r\n\t} \r\n\telse {\r\n\t\t// set a variable in local storage to fill email aftrer redirecting to login page after email confirmation\r\n\t\t//localStorage.setItem('fillEmailOnLoginPage', 'true');\r\n\t\treturn (\r\n                        <Stack sx={{ width: '100%' }} spacing={2}>\r\n                                <Alert severity=\"info\">\r\n                                {isLoggedIn\r\n\t\t\t\t\t\t\t? 'Your account has been successfully verified! Go on and shop for the best deals of the day!'\r\n\t\t\t\t\t\t\t: `Your account has been successfully verified! Please\r\n\t\t\t\t\t\tlogin and start exploring the best deals on all your\r\n\t\t\t\t\t\tfavorite products.`}\r\n                                </Alert>\r\n                                {!setIsLoggedIn ? <Link to='/login'>Login</Link> : null}\r\n                        </Stack>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Confirmuser;\r\n","import React,{ useEffect } from 'react';\r\nimport {  Container,Typography,FormGroup,FormControl,TextField,styled,Button,FormControlLabel,InputLabel,Select,MenuItem,FormLabel,RadioGroup, Radio,Avatar ,ImageListItem,ImageList,InputAdornment,IconButton,Checkbox,Alert,Stack} from '@mui/material';\r\n//import { styled } from '@mui/material/styles';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { useState } from 'react';\r\nimport Loading from \"../layout/Loading\";\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport { useNavigate,useParams } from 'react-router-dom';\r\nimport { useFormik } from 'formik'; \r\nimport * as Yup from 'yup';\r\nimport { deepOrange } from '@mui/material/colors';\r\nimport '../../hide.css';\r\nimport {editUserFromAdminByIds,getUserDetails} from '../../store/actions/authActions';\r\n\r\nvar imgToShow='';\r\nconst Useredit = () => {\r\n\r\n    const [isAdmin,setIsadmin] = useState(false);\r\n    const [image,setImage] = useState('');\r\n    const [imagePreview,setImagePreview] = useState('');\r\n    const [spinner,setSpinner] = useState(true);\r\n    const [values, setValues] = useState({showPassword: false});\r\n    const [valuesRe, setValuesRe] = useState({showRePassword: false});\r\n    \r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const {id} = useParams();\r\n    const editUserFromAdmin = useSelector((state) => state.editUserFromAdmin);\r\n    let { loading, error, success,profile } = editUserFromAdmin;\r\n    const userLogin = useSelector((state) => state.userLogin);\r\n    const { userInfo } = userLogin;\r\n    const userDetails = useSelector((state) => state.userDetails);\r\n    const {userInfoById} = userDetails;\r\n\r\n    //image handling\r\n    const handleProductImageUpload = (e) => {\r\n        const file = e.target.files[0];\r\n    \r\n        TransformFileData(file);\r\n    };\r\n    //reading image using The FileReader object lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.\r\n    const TransformFileData = (file) => {\r\n        const reader = new FileReader();\r\n     //   formik.errors.image=null;\r\n        if (file) {\r\n          reader.readAsDataURL(file);\r\n          reader.onloadend = () => {\r\n            document.getElementById(\"pic\").src = reader.result;\r\n            setImage(reader.result);\r\n            setImagePreview(\"\");\r\n          };\r\n        } else {\r\n            setImage(\"\");\r\n        }\r\n    };\r\n    const handleClickShowPassword = () => {\r\n        setValues({ ...values, showPassword: !values.showPassword });\r\n    };\r\n    const handleClickShowRePassword = () => {\r\n        setValuesRe({ ...valuesRe, showRePassword: !valuesRe.showRePassword });\r\n    };\r\n    let savedValues ='';\r\n    if(userInfoById) //id !== userInfo._id\r\n    {\r\n            savedValues = {\r\n                name: userInfoById.name,\r\n                occupation: userInfoById.occupation,\r\n                email: userInfoById.email,\r\n                password: '',\r\n                repassword:'',\r\n                phone: userInfoById.phone,\r\n                description: userInfoById.description,\r\n                age: userInfoById.age,\r\n                gender: userInfoById.gender,\r\n                isAdmin: userInfoById.isAdmin\r\n            }\r\n            if((userInfoById)){\r\n                imgToShow = userInfoById.image.url;\r\n            }\r\n            \r\n          //  setSpinner(false);\r\n    }\r\n    const initialValues ={\r\n        name:'',\r\n        occupation:'',\r\n        email:'',\r\n        password:'',\r\n        repassword:'',\r\n        phone:'',\r\n        description:'',\r\n        age:'',\r\n        gender:'',\r\n        image:'',\r\n        isAdmin:''\r\n  }\r\n    const schema = Yup.object({\r\n        name:    Yup.string()\r\n                    .required('Name is required!')\r\n                    .min(3, 'Name should have of minimum 3 characters')\r\n                    .max(50, 'Name should have of minimum 30 characters'),\r\n        occupation: Yup.string()\r\n                    .required(\"Occupation is required!\")\r\n                    .min(3,\"Occupation should have minimum 3 characters!\")\r\n                    .max(30,\"Occupation should have maximum 30 characters!\"),\r\n        email: Yup.string()\r\n                    .required(\"Email is required!\")\r\n                    .email(\"Email is invalid!\")\r\n                    .min(8,'Email should have of minimum 8 characters length!'),\r\n        password: Yup.string()\r\n                    .min(8, 'Password should be of minimum 6 characters length')\r\n                    .max(30, 'Password should be of minimum 30 characters length')\r\n                    //.required('Password is required') //in editing password is not required initially because it comes from database and we will not check its required\r\n                    .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/, 'Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters.'),\r\n        repassword: Yup.string('')\r\n                    .min(8, 'Re Password should be of minimum 6 characters length')\r\n                    .max(30, 'Re Password should be of minimum 30 characters length')\r\n                    //.required('Re Password is required') //.required('Password is required') in editing password is not required initially because it comes from database  and we will not check its required\r\n                    .matches(/^(?=.*\\d)(?=.*[@#\\-_$%^&+=ยง!\\?])(?=.*[a-z])(?=.*[A-Z])[0-9A-Za-z@#\\-_$%^&+=ยง!\\?]+$/, 'Password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number and a special characters.')\r\n                    .when('password', {\r\n                    is: (val) => !!(val && val.length > 0),\r\n                    then: Yup.string().oneOf(\r\n                        [Yup.ref('password')],\r\n                        'Password and Retype Password do not match')\r\n                    }),                        \r\n        phone: Yup.string()\r\n                    .required(\"Phone is required!\")\r\n                    .min(10,\"Phone should have minimum 10 digits!\"),\r\n        description: Yup.string()\r\n                    .required(\"Description is required!\")\r\n                    .min(3,\"Descrition should have minimum 3 characters!\")\r\n                    .max(1500,\"Descrition should have maximum 1500 characters!\"),\r\n        age:         Yup.string()\r\n                        .required(\"Age is required!\"),       \r\n        gender:     Yup.string()\r\n                    .required(\"Please select a gender!\"),               \r\n        /*image: Yup.mixed()\r\n                .nullable()\r\n                .required(\"Image is required!\")\r\n                .test('type',  \"We only support jpeg/jpg/png/bmp formats\", function (value) {\r\n                    //alert('Here='+value.type)\r\n                    return value && (value.type === \"image/jpeg\" || \r\n                                    value.type === \"image/bmp\" || \r\n                                    value.type === \"image/jpg\" || \r\n                                    value.type === \"image/png\")}),\r\n        recaptcha : Yup.string()\r\n                    .required(\"Please confirm that you are not a robot, to select checkbox!\") */                          \r\n    })\r\n    const formik = useFormik({\r\n        initialValues: (savedValues || initialValues),\r\n        validationSchema: schema,\r\n        enableReinitialize:true,  //this variable must be true if data comes from API\r\n        onSubmit: (values,{resetForm}) => {\r\n            onUpdateProfile(values,resetForm);\r\n        }\r\n    })\r\n    \r\n    const onUpdateProfile = (val) => {\r\n        const postBody = {\r\n            name:val.name,\r\n            occupation: val.occupation,\r\n            email:val.email,\r\n            password:val.password,\r\n            phone: val.phone,\r\n            description: val.description,\r\n            age:val.age,\r\n            gender:val.gender,            \r\n            isAdmin:isAdmin,\r\n            image:image\r\n        }\r\n      //  alert(JSON.stringify(postBody));return;\r\n        document.getElementById(\"submitting\").innerText = \"Updating user...Please wait!\";\r\n        document.getElementById(\"submitting\").disabled  = true;\r\n        dispatch(editUserFromAdminByIds(postBody,id));\r\n           \r\n    }\r\n    useEffect(() => {\r\n            dispatch(getUserDetails(id));\r\n            setSpinner(false);\r\n    },[]);  \r\n  return (\r\n  <Container>\r\n    <FormContainer style={\r\n        userInfo && !userInfo.isConfirmed\r\n            ? {\r\n                    opacity: '0.5',\r\n                    pointerEvents: 'none',\r\n              }\r\n            : {\r\n                    opacity: '1',\r\n                    pointerEvents: '',\r\n              }\r\n        }>\r\n            <center><Avatar style={{alignItems:'center'}} sx={{ bgcolor: deepOrange[500] }} /></center>\r\n            <Typography variant=\"h5\" style={{textAlign:'center'}}>Edit Selected User<Ptags>(All the field having * are required)</Ptags></Typography>\r\n            {(loading && <Loading />) || (spinner===true && <Loading />)} {(success && navigate(\"/users\"))}\r\n            {userInfo && !userInfo.isConfirmed ? (\r\n                <Stack sx={{ width: '100%' }} spacing={2}>\r\n                    <Alert severity=\"info\">\r\n                        Your Account has been Created! Please check your email to verify your account and start shopping\r\n                    </Alert>\r\n                </Stack>\r\n                ) : null\r\n            }\r\n            <FormControl>\r\n                    <TextField \r\n                            value={formik.values.name} \r\n                            required='required'\r\n                            id=\"name\"\r\n                            name=\"name\" \r\n                            label=\"Name\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.name && Boolean(formik.errors.name)}\r\n                            helperText={formik.touched.name && formik.errors.name} \r\n                    />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <TextField value={formik.values.occupation} \r\n                               label=\"Occupation\" \r\n                               name=\"occupation\" \r\n                               onChange={formik.handleChange} required \r\n                               error={formik.touched.occupation && Boolean(formik.errors.occupation)}\r\n                               helperText={formik.touched.occupation && formik.errors.occupation}\r\n                               />\r\n                </FormControl>                 \r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.email} \r\n                            required='required'\r\n                            id=\"email\"\r\n                            name=\"email\" \r\n                            label=\"Email\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email} \r\n                    /><Spanning id=\"email-error\"></Spanning>\r\n                </FormControl>\r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.password} \r\n                            required='required'\r\n                            id=\"password\"\r\n                            name=\"password\" \r\n                            label=\"Password\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password} \r\n                            type={values.showPassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {values.showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}}\r\n                    />\r\n                </FormControl> \r\n                <FormControl>\r\n                <TextField \r\n                            value={formik.values.isAdmin} \r\n                            required='required'\r\n                            id=\"repassword\"\r\n                            name=\"repassword\" \r\n                            label=\"RePassword\"  \r\n                            onChange={formik.handleChange} \r\n                            inputProps={{ maxLength: 50 }}\r\n                            error={formik.touched.repassword && Boolean(formik.errors.repassword)}\r\n                            helperText={formik.touched.repassword && formik.errors.repassword} \r\n                            type={valuesRe.showRePassword ? 'text' : 'password'} \r\n                            InputProps={{endAdornment: (\r\n                                \r\n                                    <InputAdornment position=\"end\">\r\n                                      <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowRePassword}\r\n                                        edge=\"end\"\r\n                                      >\r\n                                        {valuesRe.showRePassword ? <VisibilityOff /> : <Visibility />}\r\n                                      </IconButton>\r\n                                    </InputAdornment>\r\n                                  \r\n                            )}}\r\n                    />\r\n                </FormControl> \r\n                <FormControl>\r\n                    <TextField value={formik.values.phone} \r\n                               required\r\n                               label=\"Phone\" \r\n                               name=\"phone\" \r\n                               onChange={formik.handleChange} \r\n                               type=\"number\" \r\n                               onInput = {(e) =>{e.target.value = Math.max(0, parseInt(e.target.value)).toString().slice(0,10)}}  \r\n                               error={formik.touched.phone && Boolean(formik.errors.phone)}\r\n                               helperText={formik.touched.phone && formik.errors.phone}\r\n                               />\r\n                </FormControl>     \r\n                <FormControl>\r\n                    <TextField value={formik.values.description} \r\n                               label=\"Description\" \r\n                               name=\"description\" \r\n                               onChange={formik.handleChange} required \r\n                               multiline\r\n                               rows={4}\r\n                               error={formik.touched.description && Boolean(formik.errors.description)} \r\n                               helperText={formik.touched.description && formik.errors.description}/>\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel label=\"Age\" required error={formik.touched.age && Boolean(formik.errors.age)} \r\n                               helperText={formik.touched.age && formik.errors.age}>Age</InputLabel>\r\n                    <Select value={formik.values.age} \r\n                               label=\"Age\" \r\n                               name=\"age\" \r\n                               onChange={formik.handleChange} required \r\n                               error={formik.touched.age && Boolean(formik.errors.age)} \r\n                               helperText={formik.touched.age && formik.errors.age}>\r\n                        <MenuItem value=\"10\">10 Years</MenuItem>\r\n                        <MenuItem value=\"20\">20 Years</MenuItem> \r\n                        <MenuItem value=\"30\">30 Years</MenuItem> \r\n                        <MenuItem value=\"40\">40 Years</MenuItem>     \r\n                        <MenuItem value=\"50\">50 Years</MenuItem>\r\n                        <MenuItem value=\"60\">60 Years</MenuItem> \r\n                        <MenuItem value=\"70\">70 Years</MenuItem> \r\n                        <MenuItem value=\"80\">80 Years</MenuItem>\r\n                    </Select>       \r\n                </FormControl>  \r\n                <Spannings id=\"age-error\">{(formik.touched.age && formik.errors.age)?<div>{formik.errors.age}</div>:''}   </Spannings>                 \r\n                <FormControl  className=\"fieldset\">\r\n                    <FormLabel  required error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                        helperText={formik.touched.gender && formik.errors.gender}>Gender</FormLabel>\r\n                    <RadioGroup\r\n                        value={formik.values.gender}\r\n                        row\r\n                        name=\"gender\" // eslint-disable-next-line no-unused-expressions\r\n                        onChange={(e) => {formik.handleChange;formik.setFieldValue(\"gender\",e.currentTarget.value)}}\r\n                        required \r\n                       /* error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                        helperText={formik.touched.gender && formik.errors.gender*}*/>\r\n                        <FormControlLabel \r\n                                value=\"Male\"\r\n                                control={<Radio />} \r\n                                label=\"Male\" \r\n                                />\r\n                        <FormControlLabel \r\n                                value=\"Female\"\r\n                                control={<Radio />} \r\n                                label=\"Female\" \r\n                                />\r\n                    </RadioGroup>\r\n                 </FormControl>         \r\n                 <Spannings id=\"gender-error\">{(formik.touched.gender && formik.errors.gender)?<div>{formik.errors.gender}</div>:''}   </Spannings>                  \r\n                <FormControl>                                \r\n                    <ImageList>\r\n                        \r\n                        <Ptags ><Typography >Choose an image</Typography>\r\n                                    <input\r\n                                    id=\"image\"\r\n                                    accept=\"image/*\"\r\n                                    name=\"image\"\r\n                                    type=\"file\"\r\n                                    onChange={(e) => {handleProductImageUpload(e);formik.setTouched({\r\n                                        ...formik.touched.image\r\n                                      });formik.setFieldValue( \"image\", e.target.files[0] )}}\r\n                                    />\r\n                        </Ptags>\r\n                                <ImagePreview>\r\n                                    {(image || (imgToShow)) ? (\r\n                                    <>\r\n                                        <div><img src={imgToShow?imgToShow:image} alt=\"error!\" id=\"pic\"/></div>\r\n                                    </>\r\n                                    )  : (\r\n                                    <p>Product image upload preview will appear here!</p>\r\n                                    )}\r\n                                </ImagePreview>\r\n                    </ImageList>\r\n                    <Spannings id=\"iamges\">{(formik.touched.image && formik.errors.image)?<div>{formik.errors.image}</div>:null}</Spannings>\r\n                </FormControl>  \r\n                {isAdmin ? (<FormControl>\r\n                    {/* eslint-disable-next-line no-unused-expressions */}\r\n                    <FormControlLabel control={<Checkbox /*defaultChecked */  />} label=\"Set Admin\" id=\"isAdmin\" name=\"isAdmin\"   checked={formik.values.isAdmin} onChange={(e) => {formik.handleChange;setIsadmin(e.target.checked);formik.setFieldValue(\"isAdmin\",e.target.checked)}}/>\r\n                </FormControl>) : \r\n                (\r\n                <FormControl>\r\n                    {/* eslint-disable-next-line no-unused-expressions */}\r\n                    <FormControlLabel control={<Checkbox /*defaultChecked*/ />} label=\"Set Admin\" id=\"isAdmin\" name=\"isAdmin\" checked={formik.values.isAdmin} onChange={(e) => {formik.handleChange;setIsadmin(e.target.checked);formik.setFieldValue(\"isAdmin\",e.target.checked)}}/></FormControl>\r\n                    )\r\n                }  \r\n                \r\n \r\n                <FormControl>\r\n                    <Buttons variant=\"contained\" type=\"submit\" id=\"submitting\" onClick={(e) => formik.handleSubmit()}>Update User</Buttons>\r\n                </FormControl>\r\n    </FormContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Useredit;\r\nconst FormContainer = styled(FormGroup)`\r\nwidth: 40%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: red;\r\nfont-size:12px;\r\n`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 70%;\r\n`\r\nconst ImagePreview = styled(ImageListItem)`\r\n  border: 1px solid rgb(183, 183, 183);\r\n  max-width: 100px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: rgb(78, 78, 78);\r\n\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n`\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\n`\r\nconst Error =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:12px;\r\nfont-weight:bold;\r\nbackground-color:red;\r\n`\r\n\r\n","import axios from \"axios\";\r\nimport { /*http,*/getAPIUrlProducts,getToken } from \"../utils/localStorage\";\r\naxios.defaults.withCredentials=true;\r\n\r\nexport const createProduct = async(data) => {\r\n        const config = {\r\n                headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getToken()}`,\r\n                },\r\n        };\r\n        return await axios.post(`${getAPIUrlProducts()}/createProducts`,data,config);\r\n}\r\nexport const listProduct = async(data) => {\r\n        const config = {\r\n                headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Authorization: `Bearer ${getToken()}`,\r\n                },\r\n        };\r\n        return await axios.get(`${getAPIUrlProducts()}/listProduct`,config);\r\n}\r\n/*export const productById = async(id) => {\r\n        alert()\r\n        return await axios.get(`${getAPIUrlProducts()}/listProductByidCart/${id}`);\r\n}*/","export const PRODUCT_CREATE_REQEUST = \"PRODUCT_CREATE_REQEUST\";\r\nexport const PRODUCT_CREATE_SUCCESS = \"PRODUCT_CREATE_SUCCESS\";\r\nexport const PRODUCT_CREATE_FAIL = \"PRODUCT_CREATE_FAIL\";\r\n\r\nexport const PRODUCT_LIST_REQEUST = \"PRODUCT_LIST_REQEUST\";\r\nexport const PRODUCT_LIST_SUCCESS = \"PRODUCT_LIST_SUCCESS\";\r\nexport const PRODUCT_LIST_FAIL = \"PRODUCT_LIST_FAIL\";\r\n\r\n\r\n","import React,{useState} from 'react';\r\nimport {useNavigate,NavLink} from 'react-router-dom';\r\nimport {TextField,FormGroup,FormLabel,FormControl,ImageList,ImageListItem,FormControlLabel,Checkbox,styled,Typography,InputLabel,Select,MenuItem,Button} from '@mui/material';\r\nimport { deepOrange } from '@mui/material/colors';\r\nimport Loading from '../layout/Loading';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {createProducts} from '../../store/actions/productActions';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useEffect } from 'react';\r\n\r\nconst Listproducts = () => {\r\n   const navigate = useNavigate();\r\n   const dispatch = useDispatch();\r\n   const createProduct = useSelector(state=>state.createProduct);\r\n   const {loading,productInfo} = createProduct;\r\n   const [image,setImage] = useState('');\r\n   const [isPurchased,setIsPurchased] = useState('');\r\n\r\n   const initialValues={\r\n        name:'POCO F1 (Steel Blue, 128GB, 6GB RAM)',\r\n        rate:'16332',\r\n        description:'',\r\n        numberOfItem:'4',\r\n        ratings:'4',\r\n        image:'',\r\n        isPurchased:''\r\n  }\r\n  const schema = Yup.object({\r\n                   name: Yup.string()\r\n                            .required('Name of item is required!')\r\n                            .min(8,\"Name should of minimum 8 characters!\")\r\n                            .max(100,\"Name should of maximum 50 characters!\"),\r\n                   rate: Yup.number()\r\n                            .required('Rate of item is required!'),\r\n            description: Yup.string()\r\n                            .required('Description of item is required!')\r\n                            .min(8,\"Description should of minimum 8 characters!\")\r\n                            .max(1500,\"Description should be of maximum 150 characters!\"),\r\n           numberOfItem: Yup.number()\r\n                            .required('Number of item is required!'),\r\n                ratings: Yup.number()\r\n                            .required('Ratings of item is required!'),\r\n                  image: Yup.mixed()\r\n                            .required('Image is required!')\r\n                            .test('type', 'We only support .jpeg/.jpg/.png', (value) => {\r\n                                return (value && (value.type === \"image/jpeg\" ||\r\n                                                  value.type === \"image/jpg\" ||\r\n                                                  value.type === \"image/png\"))\r\n                            }),\r\n            isPurchased: Yup.string()\r\n                            .required('Purchase disclaimer of item is required!'),       \r\n  })\r\n  const formik = useFormik({\r\n        initialValues:initialValues,\r\n        validationSchema:schema,\r\n        onSubmit: (values,{resetFor}) =>{\r\n                submitProduct(values,resetFor);\r\n        }\r\n  });\r\n  const handleProductImageUpload = (e) => {\r\n        const file = e.target.files[0];\r\n        TransformFileData(file);\r\n  }\r\n  const TransformFileData = (file) => {\r\n    const reader = new FileReader();\r\n    const fileType =file.type;\r\n    let types = false; \r\n    if(fileType!==\"image/jpeg\" && fileType!==\"image/bmp\" && fileType!==\"image/jpg\" && fileType!==\"image/png\"){\r\n        types = true; \r\n    }\r\n    else{\r\n        types = false;\r\n    }\r\n    if(types===false){\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n            reader.onloadend = () => {\r\n              setImage(reader.result);\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        setImage(\"\");\r\n    }\r\n\r\n  };\r\n  const submitProduct = (val) => {\r\n        const postBody = {\r\n                name: val.name,\r\n                rate: val.rate,\r\n                description: val.description,\r\n                numberOfItem:val.numberOfItem,\r\n                ratings:val.ratings,\r\n                image:image,\r\n                isPurchased:isPurchased\r\n        }\r\n                //alert(JSON.stringify(isPurchased));return;\r\n                document.getElementById(\"submitting\").innerText = \"Adding products...Please wait\";\r\n                document.getElementById(\"submitting\").disabled  = false;\r\n                dispatch(createProducts(postBody));\r\n  }\r\n  useEffect(() => {\r\n        if(productInfo){\r\n                navigate(\"/listproduct\")\r\n        }\r\n  },[productInfo,navigate])\r\nreturn (\r\n   <Container>\r\n        <center><div id=\"ex4\"><i class=\"fa fa-mobile fa-4x\" aria-hidden=\"true\" sx={{ bgcolor: deepOrange[500] }}></i></div>\r\n        <Typography variant=\"h5\">Add Product <Ptags>(All the field having * are required)</Ptags></Typography></center>\r\n        {loading && <Loading />}\r\n            <FormControl id=\"name\">\r\n                <TextField \r\n                           value={formik.values.name} \r\n                           required\r\n                           id=\"name\"\r\n                           name=\"name\" \r\n                           label=\"Name\"                                \r\n                           onChange={formik.handleChange} \r\n                           inputProps={{ maxLength: 50 }} \r\n                           error={formik.touched.name && Boolean(formik.errors.name)}\r\n                           helperText={formik.touched.name && formik.errors.name}\r\n                           />\r\n            </FormControl>\r\n            <FormControl>\r\n                <TextField value={formik.values.rate} \r\n                           label=\"Rate\" \r\n                           name=\"rate\" \r\n                           onChange={formik.handleChange} required \r\n                           error={formik.touched.rate && Boolean(formik.errors.rate)}\r\n                           helperText={formik.touched.rate && formik.errors.rate}\r\n                           />\r\n            </FormControl> \r\n            <FormControl>\r\n                <TextField value={formik.values.description} \r\n                           label=\"Description\" \r\n                           name=\"description\" \r\n                           onChange={formik.handleChange} required \r\n                           error={formik.touched.description && Boolean(formik.errors.description)} \r\n                           helperText={formik.touched.description && formik.errors.description}\r\n                           id=\"outlined-multiline-static\"\r\n                           multiline\r\n                           rows={4}\r\n                           defaultValue=\"Default Value\"\r\n                           variant=\"outlined\"/>\r\n            </FormControl>\r\n            <FormControl>\r\n                <InputLabel label=\"Number of Items\" required \r\n                           error={formik.touched.numberOfItem && Boolean(formik.errors.numberOfItem)} \r\n                           helperText={formik.touched.numberOfItem && formik.errors.numberOfItem}>Number of Items</InputLabel>\r\n                <Select value={formik.values.numberOfItem} \r\n                           label=\"Number of Items\" \r\n                           name=\"numberOfItem\" \r\n                           onChange={formik.handleChange} required \r\n                           error={formik.touched.numberOfItem && Boolean(formik.errors.numberOfItem)} \r\n                           helperText={formik.touched.numberOfItem && formik.errors.numberOfItem}>\r\n                            \r\n                    <MenuItem value=\"1\">1</MenuItem>\r\n                    <MenuItem value=\"2\">2</MenuItem> \r\n                    <MenuItem value=\"3\">3</MenuItem> \r\n                    <MenuItem value=\"4\">4</MenuItem>     \r\n                </Select>    \r\n                <Spannings id=\"items-error\">{(formik.touched.numberOfItem && formik.errors.numberOfItem)?<div>{formik.errors.numberOfItem}</div>:''}   </Spannings>   \r\n            </FormControl>  \r\n            <FormControl>\r\n                <InputLabel label=\"Product Ratings\" required error={formik.touched.ratings && Boolean(formik.errors.ratings)} \r\n                           helperText={formik.touched.age && formik.errors.age}>Product Ratings</InputLabel>\r\n                <Select value={formik.values.age} \r\n                           label=\"Product Ratings\" \r\n                           name=\"ratings\" \r\n                           onChange={formik.handleChange} required \r\n                           error={formik.touched.ratings && Boolean(formik.errors.ratings)} \r\n                           helperText={formik.touched.ratings && formik.errors.ratings}>\r\n                            \r\n                    <MenuItem value=\"2\">2 stars</MenuItem>\r\n                    <MenuItem value=\"3\">3 stars</MenuItem> \r\n                    <MenuItem value=\"4\">4 stars</MenuItem> \r\n                    <MenuItem value=\"5\">5 stars</MenuItem>     \r\n                </Select>   \r\n                <Spannings id=\"rating-error\">{(formik.touched.ratings && formik.errors.ratings)?<div>{formik.errors.ratings}</div>:''}   </Spannings>     \r\n            </FormControl>            \r\n     \r\n                <ImageList>\r\n                    \r\n                    <Ptags id=\"descriptions\"><Typography style={{fontSize:'15px'}} >Choose an image *</Typography>\r\n                                <input\r\n                                id=\"images\"\r\n                                accept=\"image/*\"\r\n                                type=\"file\"\r\n                                name=\"image\"\r\n                                onChange={(e) => {handleProductImageUpload(e);formik.setTouched({\r\n                                    ...formik.touched.image\r\n                                  });formik.setFieldValue( \"image\", e.target.files[0]) }}\r\n                                required\r\n\r\n                                />\r\n                    </Ptags>\r\n                            <ImagePreview>\r\n                                {image ? (\r\n                                <>\r\n                                    <img src={image} alt=\"error!\" />\r\n                                </>\r\n                                ) : (\r\n                                <p>Product image upload preview will appear here!</p>\r\n                                )}\r\n                            </ImagePreview>\r\n                </ImageList>\r\n                <Spannings id=\"images-error\">{(formik.touched.image && formik.errors.image)?<div>{formik.errors.image}</div>:null}</Spannings>\r\n                <FormControl>\r\n                        <FormControlLabel  control={<Checkbox />}\r\n                                label='Purchase Disclaimer'\r\n                                name=\"isPurchased\"\r\n                                checked={isPurchased}\r\n                                required \r\n                                onChange={(e) => {setIsPurchased(e.target.checked);formik.setFieldValue( \"isPurchased\", e.target.checked);}}></FormControlLabel>\r\n                <Spannings id=\"isPurchased-error\">{(formik.touched.isPurchased && formik.errors.isPurchased)?<div>{formik.errors.isPurchased}</div>:null}</Spannings>\r\n            </FormControl>                                       \r\n            <FormControl>\r\n                <Buttons variant=\"contained\" id=\"submitting\" type=\"submit\" onClick={formik.handleSubmit}>Add Product</Buttons>\r\n            </FormControl>\r\n</Container>\r\n)\r\n}\r\nexport default Listproducts;\r\nconst Container = styled(FormGroup)`\r\nwidth: 40%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\n\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 1rem;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 80%;\r\n`\r\nconst ImagePreview = styled(ImageListItem)`\r\n  margin: 2rem 0 2rem 2rem;\r\n  padding: 2rem;\r\n  border: 1px solid rgb(183, 183, 183);\r\n  max-width: 200px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 2rem;\r\n  color: rgb(78, 78, 78);\r\n\r\n  img {\r\n    max-width: 100%;\r\n  }\r\n`","import {createProduct,listProduct} from '../../routes/productRoutes';\r\nimport {toast} from 'react-toastify';\r\nimport {\r\n        PRODUCT_CREATE_REQEUST,\r\n        PRODUCT_CREATE_SUCCESS,\r\n        PRODUCT_CREATE_FAIL,\r\n        PRODUCT_LIST_REQEUST,\r\n        PRODUCT_LIST_SUCCESS,\r\n        PRODUCT_LIST_FAIL   \r\n} from '../actionTypes/productConstants';\r\n\r\nexport const createProducts = (postBody) => async(dispatch) =>{\r\n        dispatch({type:PRODUCT_CREATE_REQEUST});\r\n        await createProduct(postBody).then(response => {\r\n                dispatch({type:PRODUCT_CREATE_SUCCESS, payload: response.data});\r\n                if(response.status===201){\r\n                        toast.success('Product Added Successfully!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        }); \r\n                document.getElementById(\"submitting\").innerText = \"Add products\";\r\n                document.getElementById(\"submitting\").disabled  = false;\r\n                }\r\n                else{\r\n                        dispatch({type:PRODUCT_CREATE_FAIL});\r\n                        toast.success(response.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });  \r\n                document.getElementById(\"submitting\").innerText = \"Add products\";\r\n                document.getElementById(\"submitting\").disabled  = false;                        \r\n                }\r\n        }).catch(error => {\r\n                dispatch({type:PRODUCT_CREATE_FAIL});\r\n                toast.success(error.message, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });\r\n                document.getElementById(\"submitting\").innerText = \"Add products\";\r\n                document.getElementById(\"submitting\").disabled  = false;                \r\n        });\r\n}\r\nexport const listAllProducts = () => async(dispatch) =>{\r\n        dispatch({type:PRODUCT_LIST_REQEUST});\r\n        await listProduct().then(response => {\r\n                dispatch({type:PRODUCT_LIST_SUCCESS, payload: response.data});\r\n               // alert(response.status)\r\n                if(response.status===201){\r\n                      /*  toast.success('Product Added Successfully!', {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        }); */\r\n                }\r\n                else{\r\n                        toast.success(response.message, {\r\n                                position: \"bottom-right\",\r\n                                hideProgressBar: false,\r\n                                progress: undefined,\r\n                        });                      \r\n                }\r\n        }).catch(error => {\r\n                dispatch({type:PRODUCT_LIST_FAIL});\r\n                toast.success(error.message, {\r\n                        position: \"bottom-right\",\r\n                        hideProgressBar: false,\r\n                        progress: undefined,\r\n                });               \r\n        });\r\n}","import React from 'react';\r\n//import {useDispatch} from 'react-redux';\r\n//import Swal from 'sweetalert2';\r\nimport '../../hide.css';\r\n\r\n//import {Link} from 'react-router-dom';\r\n\r\nconst Productrecords = ({Productrecord}) => {\r\n      //const dispatch = useDispatch();\r\n      const deleteproduct = (e,id) => {\r\n            if (window.confirm(\"Are you sure?\")) {\r\n              let targetSet = e.currentTarget;\r\n              targetSet.innerText='Deleting';\r\n            //   dispatch(deleteCustomers(e,id));\r\n            }\r\n      }      \r\n    return (\r\n      <tr key={Productrecord._id}>\r\n          <td><img src={Productrecord.image.url} className=\"bag-quantity1\" alt=\"alt\"/></td>\r\n          <td>{Productrecord.name}</td>\r\n          <td>{Productrecord.rate}</td>\r\n          <td>{Productrecord.description}</td>\r\n          <td>{Productrecord.numberOfItem}</td>\r\n          <td>{Productrecord.ratings}</td>\r\n          <td>{(Productrecord.isPurchased===true)?'Available':'Not in Stock'}</td>          \r\n          <td><a style={{color:'white',textDecoration: 'none',pointerEvents: 'none'}} className='btn btn-success btn-sm' href={`/productedit/${Productrecord._id}`} >Edit</a></td>\r\n          <td>\r\n            <button disabled className='btn btn-danger btn-sm' onClick={(e) => deleteproduct(e,Productrecord._id)} >Delete</button>\r\n          </td>    \r\n      </tr>\r\n    )\r\n}\r\nexport default Productrecords;","import React, {useEffect,useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {listAllProducts} from '../../store/actions/productActions';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport Productrecords from './Productrecords';\r\nimport {TablePagination} from '@mui/material';\r\n\r\nconst Listproducts = () => {\r\n  const dispatch = useDispatch();\r\n  const listProduct = useSelector((state) => state.listProduct);\r\n  const { loading,productInfo } = listProduct;\r\n\r\n  const [dataPage, setDataPage] = useState(0);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(3);\r\n  //const onDataPageChange = (event, page) => setDataPage(page - 1);\r\n\r\n  const handleChangePage = (event, newPage) => setPage(newPage);\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 2));\r\n    setPage(0);\r\n  };\r\n\r\n  useEffect(()=>{\r\n   dispatch(listAllProducts());\r\n   setPage(0); \r\n  },[dispatch,dataPage]);\r\n\r\n  let listContent;\r\n  let count=0;\r\n\r\n    if(loading) {\r\n        listContent = <tr><td colSpan='10'><h5>Loading...</h5></td></tr>//<div className=\"list-msg\"><Spinner/></div>;\r\n    }\r\n    else {\r\n        count=productInfo?.length;\r\n        {productInfo && productInfo.length>0 ?\r\n        (listContent = productInfo.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((stud) => (<Productrecords Productrecord={stud} />))) : (listContent = <tr><td colSpan='10'><h5>No record found</h5></td></tr>)}\r\n    }\r\n  return (\r\n    <div className='container mt-5' >\r\n        <div className='row'>\r\n            <div className='col-md-11'>\r\n                <div className='card'>\r\n                    <div className='card-header'>\r\n                        <h4>Products\r\n                            <Link to={'/createproduct'} reloadDocument className=\"btn btn-primary btn-sm float-end\">Add Product</Link>\r\n                        </h4>\r\n                    </div>\r\n                    <div className='card-body' style={{width: 'auto'}}>\r\n                        <table className='table table-bordered table-striped' >\r\n                            <thead>\r\n                                <tr><th>Image</th><th>Name</th>\r\n                                    <th>Rate</th><th>Description</th><th>No of Item</th><th>Ratings</th><th>Purchased</th><th>Edit</th><th>Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {listContent}\r\n                            </tbody>\r\n                        </table>\r\n                        <TablePagination\r\n                                rowsPerPageOptions={[0]}\r\n                                component=\"div\"\r\n                                count={count}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onPageChange={handleChangePage}\r\n                                onRowsPerPageChange={handleChangeRowsPerPage}\r\n                            />\r\n                    </div>\r\n                 </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Listproducts;\r\n\r\n","import React,{useEffect,useState} from 'react';\r\nimport { Typography,FormGroup,styled,Divider } from '@mui/material';\r\nimport {getUser} from '../utils/localStorage';\r\nimport moment from 'moment';\r\n\r\n\r\nconst Container = styled(FormGroup)`\r\nwidth: 40%;\r\ncolor: blue;\r\nmargin: 15% 20% 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\n    \r\n  const Home = () => {\r\n    const [name,setName]= useState('');\r\n    const [email,setEmail]= useState('');\r\n   \r\n    useEffect(() => {\r\n    const savedUser = getUser();\r\n    if(savedUser){\r\n      setName(savedUser.name);\r\n      setEmail(savedUser.email);\r\n    };\r\n    setInterval(() => {\r\n      const date = new Date();\r\n    }, 0);\r\n\r\n   },[]); \r\n    \r\n  return (\r\n\r\n    <Container>\r\n            <Typography variant=\"h5\">Users DashBoard</Typography>\r\n            <Divider variant=\"middle\"/>\r\n            <p>Name: {name.charAt(0).toUpperCase() + name.slice(1)}</p>\r\n            <p>Email: {email}</p>\r\n            <p>Current Time: {moment().format(\"DD-MM-YYYY hh:mm:ss\")}</p>\r\n    </Container>\r\n  \r\n  )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: '50%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    marginRight: '-50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n};\r\n\r\n// Make sure to bind modal to your appElement (https://reactcommunity.org/react-modal/accessibility/)\r\n//Modal.setAppElement('#yourAppElement');\r\n\r\nconst Modals = () => {\r\n  let subtitle;\r\n  const [modalIsOpen, setIsOpen] = React.useState(false);\r\n\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n\r\n  function afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n    subtitle.style.color = '#f00';\r\n  }\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={openModal}>Open Modal</button>\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        style={customStyles}\r\n        contentLabel=\"Example Modal\"\r\n      >\r\n        <h2 ref={(_subtitle) => (subtitle = _subtitle)}>Hello</h2>\r\n        <button onClick={closeModal}>close</button>\r\n        <div>I am a modal</div>\r\n        <form>\r\n          <input />\r\n          <button>tab navigation</button>\r\n          <button>stays</button>\r\n          <button>inside</button>\r\n          <button>the modal</button>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Modals;","import React,{useState} from 'react';\r\nimport '../../hide.css';\r\nimport {Paper} from '@mui/material';\r\nimport Rating from '@mui/material/Rating';\r\nimport Grid from '@mui/material/Unstable_Grid2';\r\nimport { styled } from '@mui/material/styles';\r\nimport { Card } from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst Productrecords = ({Productrecord}) => {\r\n   const Item = styled(Paper)(({ theme }) => ({\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n        ...theme.typography.body2,\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n   }));     \r\n   const [value,setValue] = useState(true);\r\n   return (\r\n        <Grid container spacing={1}>\r\n      <Grid xs={12}>\r\n          <Item>\r\n        \r\n                <Link to={`/producttocart/${Productrecord._id}`}>\r\n                        <img\r\n                                loading='lazy'\r\n                                src={Productrecord.image.url}\r\n                                variant='top'\r\n                                alt={Productrecord.name}\r\n                        />\r\n\t\t</Link>\r\n            \r\n                <Link\r\n                        to={`/producttocart/${Productrecord._id}`}\r\n                        style={{ color: 'dimgray', textDecoration: 'none' }}>\r\n                        <Card.Title >\r\n                                {Productrecord.name}\r\n                        </Card.Title>\r\n                </Link>\r\n                \r\n                        {Productrecord && Productrecord.ratings && (\r\n                                <Rating\r\n                                        name=\"half-rating\"\r\n                                        precision={0.5}\r\n                                        value={Productrecord.ratings/2}\r\n                                        onChange={(event, newValue) => {\r\n                                       // setValue(newValue);\r\n                                }}/>\r\n                        )}\r\n                \r\n                <p style={{color:'black',fontSize:'15px'}}>\r\n                    <b>\r\n                        {Productrecord.rate &&\r\n                                Productrecord.rate.toLocaleString('en-IN', {\r\n                                        maximumFractionDigits: 2,\r\n                                        style: 'currency',\r\n                                        currency: 'INR',\r\n                                })}\r\n                    </b>\r\n                </p>\r\n                <p style={{color:'black',fontSize:'15px'}}>\r\n                    <b>\r\n                        Quantity:\r\n                    </b>\r\n                        {Productrecord.numberOfItem &&\r\n                                Productrecord.numberOfItem\r\n                                }\r\n                    \r\n                </p>  \r\n                <p style={{color:'black',fontSize:'15px'}}>            \r\n                        <b>Availibility:</b>\r\n                        {Productrecord.numberOfItem &&\r\n                                (Productrecord.isPurchased===true)?'In Stock':'Not in Stock'\r\n                                }\r\n                </p>                           \r\n             </Item>\r\n             </Grid>\r\n        </Grid>\r\n    )\r\n}\r\nexport default Productrecords;","import React, {useEffect,useState} from 'react';\r\nimport Loading from '../layout/Loading';\r\nimport {TablePagination,FormLabel,styled} from '@mui/material';\r\nimport Productrecords from './Productrecords';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport {productListings} from '../../store/actions/cartActions';\r\nimport Message from '../Message';\r\n\r\nconst Productlisting = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const productListingsCart = useSelector(state=>state.productListingsCart);\r\n  const {loading,cartInfo} = productListingsCart;\r\n  const [dataPage, setDataPage] = useState(0);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(3);\r\n  const [promptVerfication, setPromptVerification] = useState(false);\r\n  //const onDataPageChange = (event, page) => setDataPage(page - 1);\r\n\r\n  const handleChangePage = (event, newPage) => setPage(newPage);\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 2));\r\n    setPage(0);\r\n  };\r\n\r\n  useEffect(()=>{\r\n   dispatch(productListings());\r\n   setPage(0); \r\n  },[dataPage,dispatch]);\r\n  useEffect(() => {\r\n    localStorage.getItem('userInfo'); \r\n\t\tsetPromptVerification(\r\n\t\t\tlocalStorage.getItem('promptEmailVerfication') === 'true'\r\n\t\t\t\t? true\r\n\t\t\t\t: false\r\n\t\t);\r\n\t}, []);\r\n\r\n  let count=cartInfo?.length;\r\n  \r\n  return (\r\n    <div className='container mt-5' >\r\n      {promptVerfication ? (\r\n\t\t\t\t<Message variant='info' duration={20}>\r\n\t\t\t\t\tAccount Created! Please check your email to verify your\r\n\t\t\t\t\taccount and start shopping\r\n\t\t\t\t</Message>\r\n\t\t\t) : null}\r\n          <Row>{!loading && cartInfo?.length>0\r\n\t\t\t\t\t\t\t? cartInfo.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((product,i) => {\r\n                  return (\r\n                        <Col\r\n                            sm={12}\r\n                            md={6}\r\n                            lg={4}\r\n                            xl={3} key={i}>\r\n                            <Productrecords Productrecord={product} />\r\n                        </Col>\r\n                        );\r\n                      }):<Loading />}\r\n          </Row>                          \r\n                     {count > 0 ?   \r\n                            <TablePagination\r\n                                rowsPerPageOptions={[0]}\r\n                                component=\"div\"\r\n                                count={count}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onPageChange={handleChangePage}\r\n                                onRowsPerPageChange={handleChangeRowsPerPage}\r\n                            /> : ''}\r\n                 \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Productlisting;\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:12px;\r\nfont-weight:bold;\r\nbackground-color:red;\r\n`\r\n","import React, {useEffect,useState} from 'react';\r\nimport {useParams,useNavigate} from 'react-router-dom';\r\nimport ImageMagnifier from './ImageMagnifier'; // to magnify image on hover\r\nimport Loading from '../layout/Loading';\r\n//import Message from './Message';\r\nimport Rating from '@mui/material/Rating';\r\nimport { Select,MenuItem } from '@mui/material';\r\nimport {productByIdToCart} from '../../store/actions/cartActions';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport {setProduct} from '../../utils/localStorage';        \r\n\r\n//import {Grid ,Col, styled,Typography,Card,ListGroup,Form,Button } from '@mui/material';\r\n\r\nimport { Row,Col,Card,Button,ListGroup,Form,FloatingLabel, } from 'react-bootstrap';\r\n\r\nconst Producttocarts = () => {\r\n  const {id} = useParams();\r\n  \r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const userLogin = useSelector(state=>state.userLogin);\r\n  const {userInfo} = userLogin;\r\n  const productToCart = useSelector(state=>state.productToCart);\r\n  const {loading, error, cartInfo} = productToCart;\r\n  //alert(JSON.stringify(cartInfo));//return;\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [allReviews, setAllReviews] = useState([]);\r\n  const [value, setValue] = useState(''); // bool to check if the user has ordered this product\r\n  const [showReviewForm, setShowReviewForm] = useState(false); // bool to decide whether to show the review form or not\r\n\r\n  const [spinner,setSpinner] = useState(false);\r\n  const handleAddToCart = (e) => {\r\n        setProduct(cartInfo);\r\n        navigate(`/cart/${id}?qty=${quantity}`);\r\n  };\r\n\r\n  const handleReviewSubmit = (e) => {\r\n       /* dispatch(\r\n                createProductReview(match.params.id, {\r\n                        ratings,\r\n                        review,\r\n                })\r\n        );*/\r\n  };\r\n  \r\n  useEffect(()=>{\r\n        dispatch(productByIdToCart(id));\r\n  },[]); \r\n     \r\n  return (\r\n\r\n        <div className='container mt-5' >\r\n        {loading && <Loading />}\r\n          <Row>\r\n             <Col md={4}>\r\n                    <ImageMagnifier\r\n                            src={cartInfo && cartInfo[0].image.url}\r\n                            alt={cartInfo && cartInfo[0].name}\r\n                            title={cartInfo && cartInfo[0].name}\r\n                    />\r\n            </Col> \r\n            <Col md={3}>\r\n                     <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                    <h3>{cartInfo && cartInfo[0].name}</h3>\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                    {cartInfo && cartInfo[0].ratings && (\r\n                                            <Rating\r\n                                            value={cartInfo && cartInfo[0].ratings}\r\n                                            onChange={(event, newValue) => {\r\n                                            setValue(newValue);}}\r\n                                            />\r\n                                    )}\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                    <strong>Price: </strong>\r\n                                    {cartInfo && cartInfo[0].rate &&\r\n                                            cartInfo[0].rate.toLocaleString('en-IN', {\r\n                                                    maximumFractionDigits: 2,\r\n                                                    style: 'currency',\r\n                                                    currency: 'INR',\r\n                                            })}\r\n                            </ListGroup.Item>\r\n                            <ListGroup.Item>\r\n                                    <strong>Description:</strong>{' '}\r\n                                    {cartInfo && cartInfo[0].description}\r\n                            </ListGroup.Item>\r\n                    </ListGroup> \r\n            </Col>\r\n            <Col md={3}>\r\n                        <Card>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                <Row>\r\n                                        <Col>\r\n                                                <strong>Price: </strong>\r\n                                        </Col>\r\n                                        <Col>\r\n                                                {cartInfo && cartInfo[0].rate &&\r\n                                                        cartInfo[0].rate.toLocaleString(\r\n                                                                'en-IN',\r\n                                                                {\r\n                                                                        maximumFractionDigits: 2,\r\n                                                                        style: 'currency',\r\n                                                                        currency: 'INR',\r\n                                                                }\r\n                                                        )}\r\n                                        </Col>\r\n                                </Row>\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                            <ListGroup variant='flush'>\r\n                                   <ListGroup.Item>\r\n                                        <Row>\r\n                                                <Col>\r\n                                                        <strong>Status: </strong>\r\n                                                </Col>\r\n                                                <Col>\r\n                                                        {cartInfo && cartInfo[0].numberOfItem > 0\r\n                                                                ? 'In Stock'\r\n                                                                : 'Out of Stock'}\r\n                                                </Col>\r\n                                        </Row>\r\n                                   </ListGroup.Item>\r\n                                   {cartInfo && cartInfo[0].numberOfItem > 0 && (\r\n                                        <ListGroup.Item>\r\n                                        <Row>\r\n                                                <Col>\r\n                                                        <strong>Qty:</strong>\r\n                                                </Col>\r\n                                                <Col>   \r\n                                                        <Select value={quantity} \r\n                                                                        onChange={(e) =>\r\n                                                                                setQuantity(\r\n                                                                                        e.target.value\r\n                                                                                )\r\n                                                                        } >\r\n                                                                {[...Array(cartInfo && cartInfo[0].numberOfItem).keys(),\r\n                                                                                                                                                                        ].map((i)=>(<MenuItem value={i+1}>{i+1}</MenuItem>))}        \r\n    \r\n                                                        </Select>       \r\n                                                        \r\n                                                </Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                                <ListGroup.Item>\r\n                                        <Row>\r\n                                                <Button\r\n                                                        onClick={handleAddToCart}\r\n                                                        type='button'\r\n                                                        className='btn-block btn-lg'\r\n                                                        disabled={\r\n                                                                cartInfo && cartInfo[0].numberOfItem <= 0\r\n                                                        }>\r\n                                                        Add To Cart\r\n                                                </Button>\r\n                                        </Row>\r\n                                </ListGroup.Item>\r\n                            </ListGroup>\r\n                    </Card>\r\n            </Col>\r\n    </Row>\r\n    \r\n</div>\r\n) \r\n\r\n}\r\n\r\nexport default Producttocarts;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {Link,useParams,useNavigate} from 'react-router-dom';\r\nimport { FormLabel,styled } from '@mui/material';\r\nimport {Row,Col,Image,ButtonGroup,ListGroup,Button,Card,} from 'react-bootstrap';\r\nimport {addItem, removeItem} from '../../store/actions/cartActions';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\n\r\nconst CartPage = () => {\r\n\tconst {id} = useParams();\r\n\tconst navigate = useNavigate();\r\n\tconst dispatch = useDispatch();\r\n\tconst cart = useSelector((state) => state.cart);\r\n\tconst { cartInfo } = cart;\r\n\tconst [totalItems, setTotalItems] = useState(0);\r\n\r\n\tconst productID = id;\r\n\tconst qty = window.location.search ? Number(window.location.search.split('=')[1]) : 1; // fetch from the query \r\n\t// remove item from cart\r\n\tconst handleRemoveFromCart = (id) => {\r\n\t\t\r\n\t\tdispatch(removeItem(id));\r\n\t};\r\n\tuseEffect(() => {   //after getting cartInfo set cart item in cart\r\n\t\tif (cartInfo) {\r\n\t\t\tsetTotalItems(cartInfo.reduce((acc, item) => acc + item.qty, 0));\r\n\t\t}\r\n\t}, [cartInfo]);\r\n\t// store total items to localStorage state\r\n\tuseEffect(() => {\r\n\t\tif (productID) {\r\n\t\t\tdispatch(addItem(productID, qty));\r\n\t\t}\r\n\t}, [dispatch, productID, qty]);\r\n\t// proceed to shipping address page, which is the next step in placing an order\r\n\tconst handleCheckout = (e) => {\r\n\t\tnavigate('/shipping');\r\n\t};\r\n\r\n\treturn (\r\n\t<Row>\r\n\t\t<Col md={8}>\r\n\t\t\t<h1>Shopping Cart</h1>\r\n\t\t\t{cartInfo?.length === 0 ? (\r\n\t\t\t\t<Spannings>\r\n\t\t\t\t\tYour Cart is empty. <Tabs to='/'>&nbsp;&nbsp;&nbsp;Go Back.</Tabs>{' '}\r\n\t\t\t\t</Spannings>\r\n\t\t\t) : (\r\n\t\t<ListGroup variant='flush'>\r\n\t\t\t{cartInfo?.length >0 && cartInfo.map((item) => (\r\n\t\t\t    <ListGroup.Item key={item.product}>\r\n\t\t\t\t<Row\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<Col md={2}>\r\n\t\t\t\t\t\t<Image\r\n\t\t\t\t\t\t\tclassName='product-image'\r\n\t\t\t\t\t\t\tsrc={item.image.url}\r\n\t\t\t\t\t\t\talt={item.name}\r\n\t\t\t\t\t\t\tfluid\r\n\t\t\t\t\t\t\trounded\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col md={4}>\r\n\t\t\t\t\t\t<Link to={`/producttocart/${item._id}`}>\r\n\t\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col\r\n\t\t\t\t\t\tmd={3}\r\n\t\t\t\t\t\tclassName='d-none d-md-flex'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\t\tjustifyContent: 'space-evenly',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{item.rate.toLocaleString('en-IN', {\r\n\t\t\t\t\t\t\tmaximumFractionDigits: 2,\r\n\t\t\t\t\t\t\tstyle: 'currency',\r\n\t\t\t\t\t\t\tcurrency: 'INR',\r\n\t\t\t\t\t\t})}\r\n\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<i style={{ fontSize: '0.7em' }}\r\n\t\t\t\t\t\t\t\tclassName='fas fa-times'\r\n\t\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t\t\t{item.qty}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t{/* display this col only for larger screens */}\r\n\t\t\t\t\t<Col\r\n\t\t\t\t\t\tmd={3}\r\n\t\t\t\t\t\tclassName='d-none d-md-flex'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\t\tjustifyContent: 'space-between',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<ButtonGroup aria-label='Addtocart'>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\toutline: 'none',\r\n\t\t\t\t\t\t\t\t\tborderRight:\r\n\t\t\t\t\t\t\t\t\t\t'1px solid white',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tdisabled={\r\n\t\t\t\t\t\t\t\t\titem.qty >=\r\n\t\t\t\t\t\t\t\t\titem.numberOfItem\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\t\t\t\taddItem(\r\n\t\t\t\t\t\t\t\t\t\t\titem._id,\r\n\t\t\t\t\t\t\t\t\t\t\tNumber(item.qty + 1)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant='primary'>\r\n\t\t\t\t\t\t\t\t<i className='fas fa-plus' />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\toutline: 'none',\r\n\t\t\t\t\t\t\t\t\tborderLeft:\r\n\t\t\t\t\t\t\t\t\t\t'1px solid white',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\t\tdisabled={item.qty === 1}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\t\t\t\taddItem(\r\n\t\t\t\t\t\t\t\t\t\t\titem._id,\r\n\t\t\t\t\t\t\t\t\t\t\tNumber(item.qty - 1)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t<i className='fas fa-minus' />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\thandleRemoveFromCart(\r\n\t\t\t\t\t\t\t\t\titem._id\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t<i className='fas fa-trash' />\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t{/* display this col only on mobile screens */}\r\n\t\t\t\t\t<Col\r\n\t\t\t\t\t\tclassName='d-flex d-md-none mt-2'\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\t\tjustifyContent: 'space-between',\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName='d-flex'\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tfontSize: '1.2em',\r\n\t\t\t\t\t\t\t\twidth: '50%',\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t{item.rate.toLocaleString(\r\n\t\t\t\t\t\t\t\t'en-IN',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmaximumFractionDigits: 2,\r\n\t\t\t\t\t\t\t\t\tstyle: 'currency',\r\n\t\t\t\t\t\t\t\t\tcurrency: 'INR',\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t<div className='ms-1'>\r\n\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tfontSize: '0.7em',\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\tclassName='fas fa-times'\r\n\t\t\t\t\t\t\t\t/>{' '}\r\n\t\t\t\t\t\t\t\t{item.qty}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName='d-flex'\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\talignItems: 'center',\r\n\t\t\t\t\t\t\t\tjustifyContent: 'space-between',\r\n\t\t\t\t\t\t\t\twidth: '50%',\r\n\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\thandleRemoveFromCart(\r\n\t\t\t\t\t\t\t\t\t\titem._id\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t<i className='fas fa-trash' />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\toutline: 'none',\r\n\t\t\t\t\t\t\t\t\tborderRight:\r\n\t\t\t\t\t\t\t\t\t\t'1px solid white',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tdisabled={\r\n\t\t\t\t\t\t\t\t\titem.qty >=\r\n\t\t\t\t\t\t\t\t\titem.numberOfItem\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\t\t\t\taddItem(\r\n\t\t\t\t\t\t\t\t\t\t\titem._id,\r\n\t\t\t\t\t\t\t\t\t\t\tNumber(item.qty + 1)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant='primary'>\r\n\t\t\t\t\t\t\t\t<i className='fas fa-plus' />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\toutline: 'none',\r\n\t\t\t\t\t\t\t\t\tborderLeft:\r\n\t\t\t\t\t\t\t\t\t\t'1px solid white',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tvariant='primary'\r\n\t\t\t\t\t\t\t\tdisabled={item.qty === 1}\r\n\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\t\t\t\taddItem(\r\n\t\t\t\t\t\t\t\t\t\t\titem._id,\r\n\t\t\t\t\t\t\t\t\t\t\tNumber(item.qty - 1)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t<i className='fas fa-minus' />\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t    </ListGroup.Item>\r\n\t\t\t))}\r\n\t\t\t</ListGroup>\r\n\t\t\t)}\r\n\t\t</Col>\r\n\t\t<Col md={4} className='mt-3'>\r\n\t\t\t<ListGroup>\r\n\t\t\t\t<Card variant='flush'>\r\n\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t<h2 className='text-center'>\r\n\t\t\t\t\t\t\tSubtotal ({totalItems}) Item\r\n\t\t\t\t\t\t\t{totalItems > 1 && 's'}\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t{cartInfo && cartInfo\r\n\t\t\t\t\t\t\t\t.reduce(\r\n\t\t\t\t\t\t\t\t\t(acc, item) =>\r\n\t\t\t\t\t\t\t\t\t\tacc + item.qty * item.rate,\r\n\t\t\t\t\t\t\t\t\t0\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t.toLocaleString('en-IN', {\r\n\t\t\t\t\t\t\t\t\tmaximumFractionDigits: 2,\r\n\t\t\t\t\t\t\t\t\tstyle: 'currency',\r\n\t\t\t\t\t\t\t\t\tcurrency: 'INR',\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t<div className='d-grid'>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\ttype='button'\r\n\t\t\t\t\t\t\t\tsize='lg'\r\n\t\t\t\t\t\t\t\tdisabled={!cartInfo?.length}\r\n\t\t\t\t\t\t\t\tonClick={handleCheckout}>\r\n\t\t\t\t\t\t\t\tProceed to checkout\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t</Card>\r\n\t\t\t</ListGroup>\r\n\t\t</Col>\r\n\t</Row>\r\n\t);\r\n};\r\n\r\nexport default CartPage;\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:18px;\r\nbackground-color:red;\r\n`\r\nconst Tabs = styled(Link)`\r\nfont-size: 15px;\r\nmargin-right: 20px;\r\ncolor:white;\r\ntext-decoration:none;\r\n`","import React from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\nimport {styled} from '@mui/material';  \r\nimport { NavLink } from 'react-router-dom';\r\nimport '../../hide.css';\r\n\r\n// there are 4 steps in the checkout process\r\n// step 1 is logging in\r\n// step 2 is shipping address input\r\n// step 3 is selecting payment option\r\n// step 4 is placing the order and seeing payment button\r\nconst CheckoutStatus = ({ step1, step2, step3, step4 }) => {\r\n\treturn (\r\n\t\t<Nav className='status-bar'>\r\n\t\t\t<div className='status-checkpoint'>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='circle'\r\n\t\t\t\t\tstyle={\r\n\t\t\t\t\t\tstep1 ? { background: '#2c3e50' } : { background: '' }\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t{step1 ? (\r\n\t\t\t\t\t<Tabs2 to=\"/login\">Sign In</Tabs2>\r\n\t\t\t\t\t\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Tabs2 disabled>Sign In</Tabs2>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className='connection' />\r\n\t\t\t<div className='status-checkpoint'>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='circle'\r\n\t\t\t\t\tstyle={\r\n\t\t\t\t\t\tstep1 && step2\r\n\t\t\t\t\t\t\t? { background: '#2c3e50' }\r\n\t\t\t\t\t\t\t: { background: '' }\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t{step2 ? (\r\n\t\t\t\t\t<Tabs2 to='/shipping'>\r\n\t\t\t\t\t\tShipping\r\n\t\t\t\t\t</Tabs2>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Nav.Link disabled>Shipping</Nav.Link>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className='connection' />\r\n\r\n\t\t\t<div className='status-checkpoint'>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='circle'\r\n\t\t\t\t\tstyle={\r\n\t\t\t\t\t\tstep1 && step2 && step3\r\n\t\t\t\t\t\t\t? { background: '#2c3e50' }\r\n\t\t\t\t\t\t\t: { background: '' }\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t{step3 ? (\r\n\t\t\t\t\t<Tabs2 to='/payment'>\r\n\t\t\t\t\t\tPayment\r\n\t\t\t\t\t</Tabs2>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Tabs2 disabled>Payment</Tabs2>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className='connection' />\r\n\r\n\t\t\t<div className='status-checkpoint'>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='circle'\r\n\t\t\t\t\tstyle={\r\n\t\t\t\t\t\tstep1 && step2 && step3 && step4\r\n\t\t\t\t\t\t\t? { background: '#2c3e50' }\r\n\t\t\t\t\t\t\t: { background: '' }\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t\t{step4 ? (\r\n\t\t\t\t\t<Tabs2 to='/placeorder'>\r\n\t\t\t\t\t\tPlace Order\r\n\t\t\t\t\t</Tabs2>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Tabs2 disabled>Place Order</Tabs2>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</Nav>\r\n\t);\r\n};\r\n\r\nexport default CheckoutStatus;\r\nconst Tabs2 = styled(NavLink)`\r\nfont-size: 13px;\r\nmargin-right: 20px;\r\ncolor:#2c3e50;\r\ntext-decoration:none;\r\ntext-transform: capitalize;\r\n`","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {  FormGroup,FormControl,TextField,styled,Button,FormLabel } from '@mui/material';  \r\n//import FormContainer from '../components/FormContainer';\r\nimport CheckoutStatus from './CheckoutStatus';\r\nimport { saveShippingAddress } from '../../store/actions/cartActions';\r\nimport { getUserDetails } from '../../store/actions/authActions';\r\nimport { useFormik } from 'formik'; \r\nimport * as Yup from 'yup';\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nconst Shipping = ({ history }) => {\r\n\tconst dispatch = useDispatch();\r\n\tconst navigate = useNavigate(); \r\n\r\n\tconst cart = useSelector((state) => state.cart);\r\n\tconst { cartInfo, shippingAddress } = cart;\r\n\t//alert(JSON.stringify(shippingAddress));\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\r\n\tconst userDetails = useSelector((state) => state.userDetails);\r\n\tconst { error } = userDetails;\r\n\r\n\tconst initialValues = {\r\n\t\taddress: '',\r\n\t\tcity:'',\r\n\t\tpostalcode:'',\r\n\t\tcountry:''\r\n\t}\r\n\tlet savedValues = '';\r\n\t\tif(shippingAddress) {\r\n\t\t   savedValues = {\r\n\t\t      address: shippingAddress.address,\r\n\t\t      city:shippingAddress.city,\r\n\t\t      postalcode:shippingAddress.postalcode,\r\n\t\t      country:shippingAddress.country\r\n\t\t   }\r\n\t\t}\r\n//alert(JSON.stringify(savedValues));\r\n\tconst schema = Yup.object({\r\n\t\taddress: Yup.string()\r\n\t\t\t    .required('Address isRequired'),\r\n\t\tcity: Yup.string()\r\n\t\t\t .required('City is Rquired!'),\r\n\t\tpostalcode: Yup.string()\r\n\t\t\t .required('Postal code is Rquired!'),\r\n\t\tcountry: Yup.string()\r\n\t\t         .required('Country is Rquired!'),\t\t\t \r\n\t\t\t \r\n\t})\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: (savedValues || initialValues),\r\n\t\tvalidationSchema: schema,\r\n\t\tenableReinitialize:true,  //this variable must be true if data comes from API\r\n\t\tonSubmit : (values,{resetForm}) => {\r\n\t\t\tshippingSubmit(values,resetForm);\r\n\t\t}\r\n\t})\r\n\t// fetch user details from the redux store\r\n\tuseEffect(() => \r\n\t{\t// eslint-disable-next-line no-unused-expressions\r\n  \t   userInfo?dispatch(getUserDetails(userInfo._id)): '';\r\n\t}, [userInfo, dispatch]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!(cartInfo.length && userInfo)) {\r\n\t\t\tnavigate('/');\r\n\t\t}\r\n\t}, [cartInfo, userInfo,navigate]);\r\n\r\n\t// save shipping address and move to payment screen\r\n\tconst shippingSubmit = (vals) => {\r\n\r\n\t\tconst postBody = {\r\n\t\t\taddress : vals.address,\r\n\t\t\tcity : vals.city,\r\n\t\t\tpostalcode : vals.postalcode,\r\n\t\t\tcountry: vals.country\r\n\t\t}\r\n\t\tdispatch(\r\n\t\t\tsaveShippingAddress(postBody));\r\n\t\tnavigate('/payment');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<CheckoutStatus step1 step2 />\r\n\t\t\t<h1>Shipping Address</h1>\r\n\t\t\t<FormControl>\r\n\t\t\t\t<TextField value={formik.values.address} \r\n\t\t\t\tlabel=\"Address\" \r\n\t\t\t\tname=\"address\" \r\n\t\t\t\tonChange={formik.handleChange} required \r\n\t\t\t\terror={formik.touched.address && Boolean(formik.errors.address)}\r\n\t\t\t\thelperText={formik.touched.address && formik.errors.address}\r\n\t\t\t\t/>\r\n                \t</FormControl>\r\n\t\t\t<FormControl>\r\n\t\t\t\t<TextField value={formik.values.city} \r\n\t\t\t\tlabel=\"City\" \r\n\t\t\t\tname=\"city\" \r\n\t\t\t\tonChange={formik.handleChange} required \r\n\t\t\t\terror={formik.touched.city && Boolean(formik.errors.city)}\r\n\t\t\t\thelperText={formik.touched.city && formik.errors.city}\r\n\t\t\t\t/>\r\n                \t</FormControl>\r\n\t\t\t<FormControl>\r\n\t\t\t\t<TextField value={formik.values.postalcode} \r\n\t\t\t\tlabel=\"Postal Code\" \r\n\t\t\t\tname=\"postalcode\" \r\n\t\t\t\tonChange={formik.handleChange} required \r\n\t\t\t\terror={formik.touched.postalcode && Boolean(formik.errors.postalcode)}\r\n\t\t\t\thelperText={formik.touched.postalcode && formik.errors.postalcode}\r\n\t\t\t\t/>\r\n                \t</FormControl>\r\n\t\t\t<FormControl>\r\n\t\t\t\t<TextField value={formik.values.country} \r\n\t\t\t\tlabel=\"Country\" \r\n\t\t\t\tname=\"country\" \r\n\t\t\t\tonChange={formik.handleChange} required \r\n\t\t\t\terror={formik.touched.country && Boolean(formik.errors.country)}\r\n\t\t\t\thelperText={formik.touched.country && formik.errors.country}\r\n\t\t\t\t/>\r\n                \t</FormControl>\r\n\t\t\t<FormControl>\r\n\t\t\t\t<Buttons variant=\"contained\" type=\"submit\" id=\"submitting\" onClick={(e) => formik.handleSubmit()}>Continue</Buttons>\r\n\t\t\t</FormControl>\t\r\n\t</Container>\r\n\t);\r\n};\r\n\r\nexport default Shipping;\r\nconst Container = styled(FormGroup)`\r\nwidth: 40%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 .8rem;\r\n`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 80%;\r\n`\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Col } from 'react-bootstrap';\r\nimport {  FormGroup,FormControl,FormControlLabel,styled,Button,FormLabel,Radio,RadioGroup } from '@mui/material';  \r\nimport CheckoutStatus from './CheckoutStatus';\r\nimport { savePaymentMethod } from '../../store/actions/cartActions';\r\nimport { getUserDetails } from '../../store/actions/authActions';\r\nimport {useNavigate,NavLink,Link } from 'react-router-dom';\r\n\r\nconst PaymentPage = () => {\r\n\tconst dispatch = useDispatch();\r\n        const navigate = useNavigate(); \r\n\tconst cart = useSelector((state) => state.cart);\r\n\tconst { shippingAddress } = cart;\r\n\r\n\tconst [paymentMethod, setPaymentMethod] = useState('Credit/Debit Card(stripe)'); // default option is the stripe one, but users might not understand 'stripe'\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\r\n\tconst userDetails = useSelector((state) => state.userDetails);\r\n\tconst { error } = userDetails;\r\n\r\n\t// fetch user details\r\n\tuseEffect(() => {\r\n\t\t// eslint-disable-next-line no-unused-expressions\r\n\t\tuserInfo? dispatch(getUserDetails(userInfo._id)): '';\r\n\t}, [userInfo, dispatch]);\r\n\r\n\t// if shipping address is empty, redirect\r\n\tuseEffect(() => {\r\n\t\tif (!shippingAddress) {\r\n\t\t\tnavigate('/shipping');\r\n\t\t}\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\r\n\tconst handleSubmit = (e) => {\r\n               // alert(paymentMethod);return;\r\n\t\tdispatch(savePaymentMethod(paymentMethod));\r\n\t\tnavigate('/placeorder');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t{/* three steps are done in the checkout process */}\r\n\t\t\t<CheckoutStatus step1 step2 step3 />\r\n                        <h1>Payment Method</h1>\r\n                        <FormControl  className=\"fieldset\">\r\n                    <FormLabel >Payment Method</FormLabel>\r\n                        <RadioGroup\r\n                                row\r\n                                name=\"paymentMethod\" \r\n\t\t\t\tvalue={paymentMethod}\r\n                                defaultValue=\"Credit/Debit Card(stripe)\"\r\n                                onChange={(e) => setPaymentMethod(e.target.value)}\r\n                        /* error={formik.touched.gender && Boolean(formik.errors.gender)} \r\n                                helperText={formik.touched.gender && formik.errors.gender*}*/>\r\n                                <FormControlLabel \r\n                                        value=\"Credit/Debit Card(stripe)\"\r\n                                        control={<Radio />} \r\n                                        label=\"Credit/Debit Card(stripe)\" \r\n                                        />\r\n                                <FormControlLabel \r\n                                        value=\"Paypal\"\r\n                                        control={<Radio />} \r\n                                        label=\"Paypal\" \r\n                                        />\r\n                        </RadioGroup>\r\n                 </FormControl> \r\n                        \r\n\t\t\t<FormControl>\r\n\t\t\t\t<Buttons variant=\"contained\" type=\"submit\" id=\"submitting\" onClick={(e) => handleSubmit()}>Continue</Buttons>\r\n\t\t\t</FormControl>\t\r\n\t\t\t\t\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default PaymentPage;\r\nconst Container = styled(FormGroup)`\r\nwidth: 40%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 .8rem;\r\n`\r\nconst Ptags =  styled('p')`\r\nfont-size:10px;\r\n`\r\nconst Buttons =  styled(Button)`\r\nwidth: 80%;\r\n`\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormLabel,styled } from '@mui/material';\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\r\nimport { Link,useNavigate } from 'react-router-dom';\r\nimport CheckoutStatus from './CheckoutStatus';\r\n//import Message from '../components/Message';\r\nimport Loading from '../layout/Loading';\r\nimport { createOrders } from '../../store/actions/orderActions';\r\nimport { CART_RESET } from '../../store/actionTypes/cartConstants';\r\nimport { refreshLogin, getUserDetails } from '../../store/actions/authActions';\r\n\r\nconst Placeorder = () => {\r\n\tconst dispatch = useDispatch();\r\n        const navigate = useNavigate();\r\n\tconst cart = useSelector((state) => state.cart);\r\n\tconst { cartInfo, shippingAddress, paymentMethod } = cart;\r\n\r\n\tconst orderCreate = useSelector((state) => state.orderCreate);\r\n\tconst { order, loading, success, error } = orderCreate;\r\n\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n//alert(paymentMethod)\r\n\tconst userDetails = useSelector((state) => state.userDetails);\r\n\tconst { error: userLoginError } = userDetails;\r\n\r\n\t// fetch the userinfo from reducx store\r\n\tuseEffect(() => {\r\n                // eslint-disable-next-line no-unused-expressions\r\n\t\tuserInfo? dispatch(getUserDetails(userInfo._id)): '';\r\n\t}, [userInfo, dispatch]);\r\n\r\n\t// refresh access token when user detail throws error\r\n\t/*useEffect(() => {\r\n\t\tif (userLoginError && userInfo && !userInfo.isSocialLogin) {\r\n\t\t\tconst user = JSON.parse(sessionStorage.getItem('userInfo'));\r\n\t\t\t//user && dispatch(refreshLogin(user.email));\r\n\t\t}\r\n\t}, [userLoginError, dispatch, userInfo]);*/\r\n\r\n\tuseEffect(() => {\r\n               // alert(success);//return;\r\n\t\tif (success) {\r\n\t\t\tsessionStorage.removeItem('cartInfo');\r\n\t\t\tdispatch({ type: CART_RESET, payload: shippingAddress }); // remove items from cart once paid, but keep the shipping address in store\r\n\t\t\tnavigate(`/order/${order._id}`);\r\n\t\t}\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, [success]);\r\n\r\n\t// All prices, tax is randomly  assigned\r\n\tcart.rate = cartInfo.reduce(\r\n\t\t(acc, item) => acc + item.rate * item.qty,\r\n\t\t0\r\n\t);\r\n\r\n\tcart.shippingPrice = cart.rate > 8000 ? 500 : 300;\r\n\tcart.taxPrice = 0.18 * cart.rate;\r\n\tcart.totalPrice = cart.rate + cart.taxPrice + cart.shippingPrice;\r\n\r\n\tconst handleOrder = (e) => {\r\n\t\t//e.preventDefault();\r\n\t\tdispatch(\r\n\t\t\tcreateOrders({\r\n\t\t\t\torderItems: cartInfo,\r\n\t\t\t\tshippingAddress,\r\n\t\t\t\tpaymentMethod,\r\n\t\t\t\titemsPrice: cart.itemsPrice,\r\n\t\t\t\tshippingPrice: cart.shippingPrice,\r\n\t\t\t\ttaxPrice: cart.taxPrice,\r\n\t\t\t\ttotalPrice: cart.totalPrice,\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n  return (\r\n        <>\r\n        {/* last step in the ckecout process */}\r\n        <CheckoutStatus step1 step2 step3 step4 />\r\n        <Row>\r\n        {loading ? (\r\n                <Loading />\r\n        ) : (\r\n                <>\r\n                <Col md={8}>\r\n                        <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                        <h2>Shipping</h2>\r\n                                        <p>\r\n                                                <strong>Address: </strong>{' '}\r\n                                                {shippingAddress.address},{' '}\r\n                                                {shippingAddress.city}-\r\n                                                {shippingAddress.postalcode},{' '}\r\n                                                {shippingAddress.country}\r\n                                        </p>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                        <h2>Payment Method</h2>\r\n                                        <p>\r\n                                                <strong>Method: </strong>{' '}\r\n                                                {paymentMethod}\r\n                                        </p>\r\n                                </ListGroup.Item>\r\n                                <ListGroup.Item>\r\n                                        <h2>Cart Items</h2>\r\n                                        {cartInfo.length !== 0 ? (\r\n                                            <ListGroup variant='flush'>\r\n                                                {cartInfo.map((item, idx) => (\r\n                                                        <ListGroup.Item key={idx}>\r\n                                                        <Row>\r\n                                                        <Col md={2}>\r\n                                                                <Image\r\n                                                                        className='product-image'\r\n                                                                        src={item.image.url}\r\n                                                                        alt={item.name}\r\n                                                                        fluid\r\n                                                                        rounded\r\n                                                                />\r\n                                                        </Col>\r\n                                                        <Col>\r\n                                                                <Link\r\n                                                                        to={`/product/${item._id}`}>\r\n                                                                        {item.name}\r\n                                                                </Link>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                                {item.qty} x{' '}\r\n                                                                {item.price} ={' '}\r\n                                                                {(\r\n                                                                        item.qty *\r\n                                                                        item.rate\r\n                                                                ).toLocaleString(\r\n                                                                        'en-IN',\r\n                                                                        {\r\n                                                                                maximumFractionDigits: 2,\r\n                                                                                style: 'currency',\r\n                                                                                currency:\r\n                                                                                        'INR',\r\n                                                                        }\r\n                                                                )}\r\n                                                        </Col>\r\n                                                        </Row>\r\n                                                        </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        ) : (\r\n                                                <Spannings id=\"iamges\">Your cart is empty</Spannings>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n                        </ListGroup>\r\n                </Col>\r\n                <Col md={4}>\r\n                        <Card>\r\n                                <ListGroup variant='flush'>\r\n                                        <ListGroup.Item className='text-center'>\r\n                                                <h2 className='text-center'>\r\n                                                        Order Summary\r\n                                                </h2>\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item>\r\n                                                <Row>\r\n                                                        <Col>\r\n                                                                <strong>Subtotal</strong>\r\n                                                        </Col>\r\n                                                        <Col>\r\n                                                                {Number(\r\n                                                                        cart.rate\r\n                                                                ).toLocaleString('en-IN', {\r\n                                                                        maximumFractionDigits: 2,\r\n                                                                        style: 'currency',\r\n                                                                        currency: 'INR',\r\n                                                                })}\r\n                                                        </Col>\r\n                                                </Row>\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item>\r\n                                                <Row>\r\n                                                        <Col>\r\n                                                                <strong>Shipping</strong>\r\n                                                        </Col>\r\n                                                        <Col>\r\n                                                                {Number(\r\n                                                                        cart.shippingPrice\r\n                                                                ).toLocaleString('en-IN', {\r\n                                                                        maximumFractionDigits: 2,\r\n                                                                        style: 'currency',\r\n                                                                        currency: 'INR',\r\n                                                                })}\r\n                                                        </Col>\r\n                                                </Row>\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item>\r\n                                                <Row>\r\n                                                        <Col>\r\n                                                                <strong>Tax</strong>\r\n                                                        </Col>\r\n                                                        <Col>\r\n                                                                {Number(\r\n                                                                        cart.taxPrice\r\n                                                                ).toLocaleString('en-IN', {\r\n                                                                        maximumFractionDigits: 2,\r\n                                                                        style: 'currency',\r\n                                                                        currency: 'INR',\r\n                                                                })}\r\n                                                        </Col>\r\n                                                </Row>\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item>\r\n                                                <Row>\r\n                                                        <Col>\r\n                                                                <strong>Total</strong>\r\n                                                        </Col>\r\n                                                        <Col>\r\n                                                                {Number(\r\n                                                                        cart.totalPrice\r\n                                                                ).toLocaleString('en-IN', {\r\n                                                                        maximumFractionDigits: 2,\r\n                                                                        style: 'currency',\r\n                                                                        currency: 'INR',\r\n                                                                })}\r\n                                                        </Col>\r\n                                                </Row>\r\n                                        </ListGroup.Item>\r\n                                        {error && (\r\n                                                <ListGroup.Item>\r\n                                                        <Spannings>\r\n                                                                {error}\r\n                                                        </Spannings>\r\n                                                </ListGroup.Item>\r\n                                        )}\r\n                                        <ListGroup.Item className='d-grid gap-2'>\r\n                                                <Button\r\n                                                        type='button'\r\n                                                        size='lg'\r\n                                                        disabled={!cartInfo.length}\r\n                                                        onClick={handleOrder}>\r\n                                                        Place Order\r\n                                                </Button>\r\n                                        </ListGroup.Item>\r\n                                </ListGroup>\r\n                        </Card>\r\n                </Col>\r\n                </>\r\n        )}\r\n     </Row>\r\n     </>\r\n   );\r\n};\r\n\r\nexport default Placeorder;\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:13px;\r\nbackground-color:red;\r\n`\r\n/*const Spannings2 =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:13px;\r\nbackground-color:red;\r\n`*/\r\n","import React, { useEffect,useState } from 'react';\r\nimport { FormGroup,FormLabel,TablePagination,styled} from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Table, Row, Col } from 'react-bootstrap';\r\nimport Loading from '../layout/Loading';\r\nimport { listAllOrders } from '../../store/actions/orderActions';\r\nimport getDateString from '../../utils/getDateString';\r\nimport {useNavigate,useParams} from 'react-router-dom';\r\n\r\n\r\nconst ProductListPage = () => {\r\n        const {pageNumber} = useParams();\r\n        const navigate = useNavigate();\r\n\t//const pageNumber = match.params.pageNumber || 1; // to fetch various pages of orders\r\n\tconst dispatch = useDispatch();\r\n        const [dataPage, setDataPage] = useState(0);\r\n        const [page, setPage] = useState(0);\r\n        const [rowsPerPage, setRowsPerPage] = useState(2);\r\n\tconst orderListAll = useSelector((state) => state.orderListAll); // to avoid blank screen display\r\n\tconst { loading, orders, error} = orderListAll;\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\r\n        const count=orders?.length;\r\n        const handleChangePage = (event, newPage) => setPage(newPage);\r\n\r\n        const handleChangeRowsPerPage = (event) => {\r\n          setRowsPerPage(parseInt(event.target.value, 2));\r\n          setPage(0);\r\n        };\r\n\r\n\t// get all orders by pagenumber\r\n\tuseEffect(() => {\r\n\t\tif (userInfo && userInfo.isAdmin) dispatch(listAllOrders());\r\n\t\telse navigate('/login');\r\n                setPage(0); \r\n\t}, [dispatch,  userInfo, dataPage]);\r\n\r\n\treturn (\r\n        <>\r\n        <Row className='align-items-center'>\r\n                <Col>\r\n                <center><h4>All Orders ({`${count || 0}`})</h4></center>\r\n                </Col>\r\n        </Row>\r\n        {loading ? (\r\n                <Loading />\r\n        ) : error ? (\r\n                <Spanning dismissible variant='danger' duration={10}>\r\n                        {error}\r\n                </Spanning>\r\n        ) : (\r\n                <Table\r\n                striped\r\n                bordered\r\n                responsive\r\n                className='table-sm text-center'>\r\n                                    <thead className='fonts' >\r\n                                        <tr><th>ID</th><th>User</th><th>Total</th>\r\n                                            <th>Date</th><th>Paid</th><th>Delievred</th><th>Action</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {orders && orders.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((order) => {\r\n                                        return (\r\n                                                <tr key={order._id}>\r\n                                                        <td>{order._id}</td>\r\n                                                        <td>{order.user && order.user.name}</td>\r\n                                                        <td>\r\n                                                                {order.totalPrice.toLocaleString(\r\n                                                                        'en-IN',\r\n                                                                        {\r\n                                                                                maximumFractionDigits: 2,\r\n                                                                                style: 'currency',\r\n                                                                                currency: 'INR',\r\n                                                                        }\r\n                                                                )}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                                {getDateString(order.createdAt)}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                                {order.isPaid ? (\r\n                                                                        getDateString(order.paidAt)\r\n                                                                ) : (\r\n                                                                        <i\r\n                                                                                className='fas fa-times'\r\n                                                                                style={{\r\n                                                                                        color: 'red',\r\n                                                                                }}\r\n                                                                        />\r\n                                                                )}\r\n                                                        </td>\r\n                                                        <td>\r\n                                                                {order.isDelivered ? (\r\n                                                                        getDateString(order.deliveredAt)\r\n                                                                ) : (\r\n                                                                        <i\r\n                                                                                className='fas fa-times'\r\n                                                                                style={{\r\n                                                                                        color: 'red',\r\n                                                                                }}\r\n                                                                        />\r\n                                                                )}\r\n                                                        </td>\r\n                                                        <td\r\n                                                                style={{\r\n                                                                        display: 'flex',\r\n                                                                        alignItems: 'center',\r\n                                                                        justifyContent: 'space-around',\r\n                                                                }}>\r\n                                                                <a style={{color:'white',textDecoration: 'none'}} className='btn btn-success btn-sm' href={`/order/${order._id}`}>\r\n                                                                        \r\n                                                                                View Details\r\n                                                                       \r\n                                                                </a>\r\n                                                        </td>\r\n                                                </tr>\r\n                                        );\r\n                                })}\r\n                        </tbody>\r\n                                \r\n                                \r\n                </Table>)}\r\n                <TablePagination\r\n                        rowsPerPageOptions={[0]}\r\n                        component=\"div\"\r\n                        count={count}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n        \r\n        \r\n        </>\r\n\t);\r\n};\r\n\r\nexport default ProductListPage;\r\nconst Container = styled(FormGroup)`\r\nwidth: 40%;\r\nmargin: 3% auto 0 auto;\r\n& > div {\r\n    margin-top:10px;\r\n}\r\n`\r\nconst Spanning =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\nmargin: 0 0 0 .8rem;\r\n`","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormLabel,styled } from '@mui/material';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport {stripeRequest} from '../../routes/orderRoutes'\r\nimport { payOrders } from '../../store/actions/orderActions';\r\nimport { savePaymentMethod } from '../../store/actions/cartActions';\r\nimport { Link,useNavigate,useParams } from 'react-router-dom';\r\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js'; // for stripe CC component\r\n//import Message from '../components/Message';\r\n\r\nconst CheckoutForm = ({price,orderID,itemQWithIds}) => {\r\n\tconst navigate = useNavigate();\r\n\tconst [error, setError] = useState(''); // from the stripe component itself\r\n\tconst dispatch = useDispatch();\r\n\tconst [clientSecret, setClientSecret] = useState(''); // from the payment intent sent from server\r\n\tconst stripe = useStripe();\r\n\tconst elements = useElements();\r\n\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\r\n\t// STEP 1: create a payment intent and getting the secret\r\n\tuseEffect(() => {\r\n\t\tconst getClientSecret = async () => {\r\n\t\t\tconst postBody = { price, email: userInfo.email };\r\n\t\t\tawait stripeRequest(postBody).then(response => {\r\n\r\n\t\t\tsetClientSecret(response.data.clientSecret);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tif (userInfo && price) getClientSecret();\r\n\t}, [price, userInfo]);\r\n\r\n\t// STEP 2: make the payment after filling the form properly\r\n\tconst makePayment = async (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (!stripe || !elements) {\r\n\t\t\t// Stripe.js has not yet loaded.\r\n\t\t\t// Make  sure to disable form submission until Stripe.js has loaded.\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//alert(JSON.stringify(elements.getElement(CardElement)))\r\n\t\tif (clientSecret) {\r\n\t\t\tlet payload = {};\r\n\t\t\tawait stripe.confirmCardPayment(clientSecret, {\r\n\t\t\t\tpayment_method: {\r\n\t\t\t\t\tcard: elements.getElement(CardElement),\r\n\t\t\t\t\tbilling_details: {\r\n\t\t\t\t\t\tname: userInfo.name,\r\n\t\t\t\t\t\temail: userInfo.email,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t}).then((result) => {\r\n\t\t\t\tif (result.paymentIntent && result.paymentIntent.status==='succeeded') {\r\n\t\t\t\t\t//alert(result.paymentIntent.status);return;\r\n\t\t\t\t\t//adding item quntity to payment details to update product quantity to product collection\r\n\t\t\t\t\tresult.paymentIntent.itemQWithId=itemQWithIds;\r\n\t\t\t\t\tdispatch(savePaymentMethod('Stripe'));\r\n\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\tpayOrders(orderID, {\r\n\t\t\t\t\t\t\t...result.paymentIntent,\r\n\t\t\t\t\t\t\tpaymentMode: 'stripe',\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetError(result.error.message);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\twindow.location.reload();\r\n\t\t}\r\n\t};\r\n\r\n\t// render a checkout form for filling details about credit or debit cards\r\n\treturn (\r\n\t\t<Form id='payment-form' onSubmit={makePayment}>\r\n\t\t\t{error && (\r\n\t\t\t\t<Spannings dismissible variant='danger'>\r\n\t\t\t\t\t{error}\r\n\t\t\t\t</Spannings>\r\n\t\t\t)}\r\n\t\t\t<Form.Group\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tmargin: '1em 0',\r\n\t\t\t\t\tfontSize: '1em',\r\n\t\t\t\t}}>\r\n\t\t\t\t<CardElement\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\t\tbase: {\r\n\t\t\t\t\t\t\t\tfontSize: '16px',\r\n\t\t\t\t\t\t\t\tcolor: '#424770',\r\n\t\t\t\t\t\t\t\t'::placeholder': {\r\n\t\t\t\t\t\t\t\t\tcolor: '#aab7c4',\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tinvalid: {\r\n\t\t\t\t\t\t\t\tcolor: '#9e2146',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tid='card-element'\r\n\t\t\t\t/>\r\n\t\t\t</Form.Group>\r\n\t\t\t<div className='d-grid'>\r\n\t\t\t\t<Button disabled={!stripe} size='lg' type='submit'>\r\n\t\t\t\t\tPay Now\r\n\t\t\t\t</Button>\r\n\t\t\t</div>\r\n\t\t</Form>\r\n\t);\r\n};\r\n\r\nexport default CheckoutForm;\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: #d32f2f;\r\nfont-size:13px;\r\n`\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormLabel,styled } from '@mui/material';\r\nimport { Row, Col, ListGroup, Image, Card, Button } from 'react-bootstrap';\r\nimport { Link,useNavigate,useParams } from 'react-router-dom';\r\nimport { PayPalScriptProvider, PayPalButtons } from \"@paypal/react-paypal-js\";\r\nimport Message from '../Message';\r\nimport Loading from '../layout/Loading';\r\nimport {\r\n\tgetOrderDetails,\r\n\tpayOrders,\r\n\tdeliverOrders,\r\n} from '../../store/actions/orderActions';\r\nimport {\r\n\tORDER_PAY_RESET,\r\n\tORDER_DELIVER_RESET,\r\n} from '../../store/actionTypes/orderConstants';\r\nimport { savePaymentMethod } from '../../store/actions/cartActions';\r\nimport { Elements } from '@stripe/react-stripe-js';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport CheckoutForm from './CheckoutForm'; //stripe checkout form\r\nimport getDateString from '../../utils/getDateString';\r\n\r\nconst Orderproduct = () => {\r\n       // const navigate = useNavigate();\r\n        const {id} = useParams();\r\n        const orderID = id;\r\n\t// load stripe\r\n\tconst stripePromise = loadStripe(\r\n\t\tprocess.env.REACT_APP_STRIPE_PUBLISHABLE_KEY\r\n\t);\r\n\t// for paypal payment\r\n        const [ errors, setErrors ] = useState();\r\n        const itemQWithId = [];\r\n\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst orderDetails = useSelector((state) => state.orderDetails);\r\n\tconst { loading, order, error } = orderDetails;\r\n\r\n\tconst orderPay = useSelector((state) => state.orderPay);\r\n\tconst { loading: loadingPay, success: successPay } = orderPay;\r\n\r\n\tconst orderDeliver = useSelector((state) => state.orderDeliver);\r\n\tconst { loading: loadingDeliver, success: successDeliver } = orderDeliver;\r\n\r\n\tconst userLogin = useSelector((state) => state.userLogin);\r\n\tconst { userInfo } = userLogin;\r\n\r\n\tconst userDetails = useSelector((state) => state.userDetails);\r\n\tconst { error: userLoginError } = userDetails;\r\n        if(order && order.orderItems!==null){\r\n                order.orderItems.map((itemQ) => {itemQWithId.push(itemQ._id+'-'+itemQ.qty)});\r\n                //console.log(JSON.stringify(order.orderItems[0]))\r\n        }\r\n        //console.log(JSON.stringify(itemQWithId))\r\n\t// get new access tokens using the refresh token, is user details throws an error\r\n\r\n\t// set order to paid or delivered, and fetch updated orders\r\n\tuseEffect(() => {\r\n\t\tif (!order || order._id !== orderID || successPay || successDeliver) {\r\n\t\t\tif (successPay) dispatch({ type: ORDER_PAY_RESET });\r\n\t\t\tif (successDeliver) dispatch({ type: ORDER_DELIVER_RESET });\r\n\t\t\tdispatch(getOrderDetails(orderID));\r\n\t\t}\r\n\t}, [order, orderID, dispatch, successPay, successDeliver]);\r\n\r\n\t// save the payment mthod as paypal\r\n\tconst successPaymentHandler = (data, actions) => {\r\n                actions.order.capture(data.orderID).then(details => {\r\n                        //adding item quntity to payment details to update product quantity to product collection\r\n                        details.itemQWithId=itemQWithId;\r\n                        dispatch(savePaymentMethod('PayPal'));\r\n                        dispatch(\r\n                                payOrders(orderID, { ...details, paymentMode: 'paypal' })\r\n                        );\r\n                        });\r\n\t\t\r\n\t};\r\n\r\n\t// set order as delivered\r\n\tconst successDeliveryHandler = () => {\r\n\t\tdispatch(deliverOrders(orderID));\r\n\t};\r\n\r\nreturn loading ? (\r\n\t\t<Loading />\r\n\t) : error ? (\r\n\t\t<Spannings >\r\n\t\t\t{error}\r\n\t\t</Spannings>\r\n\t) : (\r\n<>\r\n<h2>Order {orderID}</h2>\r\n    <Row>\r\n        {loading ? (\r\n                <Loading />\r\n        ) : (\r\n        <>\r\n        <Col md={8}>\r\n                <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                                <h2>Shipping</h2>\r\n                                <p>\r\n                                        <strong>Name: </strong>\r\n                                        {order.user.name}\r\n                                </p>\r\n                                <p>\r\n                                        <strong>Email: </strong>\r\n                                        <a href={`mailto:${order.user.email}`}>\r\n                                                {order.user.email}\r\n                                        </a>\r\n                                </p>\r\n                                {order.paymentMethod === 'Paypal'?'':\r\n                                <p>\r\n                                        <strong>Address: </strong>{' '}\r\n                                        {order.shippingAddress.address},{' '}\r\n                                        {order.shippingAddress.city}-\r\n                                        {order.shippingAddress.postalcode},{' '}\r\n                                        {order.shippingAddress.country}\r\n                                </p>\r\n                                }\r\n                                <div>\r\n                                        {order.isDelivered ? (\r\n                                                <Spannings variant='success' >\r\n                                                        Delivered at:{' '}\r\n                                                        {getDateString(\r\n                                                                order.deliveredAt\r\n                                                        )}\r\n                                                </Spannings>\r\n                                        ) : (\r\n                                                <Spannings2 variant='danger'>\r\n                                                        Not Delivered\r\n                                                </Spannings2>\r\n                                        )}\r\n                                </div>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                                <h2>Payment Method</h2>\r\n                                <p>\r\n                                        <strong>Method: </strong>{' '}\r\n                                        {order.paymentMethod}\r\n                                </p>\r\n                                <div>\r\n                                        {order.isPaid ? (\r\n                                                <Spannings variant='success'>\r\n                                                        Paid at:{' '}\r\n                                                        {getDateString(order.paidAt)}\r\n                                                </Spannings>\r\n                                        ) : (\r\n                                                <Spannings2 variant='danger'>\r\n                                                        Not Paid\r\n                                                </Spannings2>\r\n                                        )}\r\n                                </div>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                                <h2>Cart Items</h2>\r\n                                {order.orderItems.length !== 0 ? (\r\n                                        <ListGroup variant='flush'>\r\n                                          <div\r\n                                                        style={{\r\n                                                                background: 'red',\r\n                                                        }}></div>\r\n                                                {order.orderItems.map(\r\n                                                (item, idx) => (\r\n                                                        <ListGroup.Item key={idx}>\r\n                                                        <Row>\r\n                                                        <Col md={2}>\r\n                                                                <Image\r\n                                                                        className='product-image'\r\n                                                                        src={\r\n                                                                                item.image.url\r\n                                                                        }\r\n                                                                        alt={\r\n                                                                                item.name\r\n                                                                        }\r\n                                                                        fluid\r\n                                                                        rounded\r\n                                                                />\r\n                                                        </Col>\r\n                                                        <Col>\r\n                                                                <Link\r\n                                                                        to={`/product/${item._id}`}>\r\n                                                                        {item.name}\r\n                                                                </Link>\r\n                                                        </Col>\r\n                                                        <Col md={4}>\r\n                                                                {item.qty} x{' '}\r\n                                                                {item.rate} ={' '}\r\n                                                                {(\r\n                                                                        item.qty *\r\n                                                                        item.rate\r\n                                                                ).toLocaleString(\r\n                                                                        'en-IN',\r\n                                                                        {\r\n                                                                                maximumFractionDigits: 2,\r\n                                                                                style: 'currency',\r\n                                                                                currency:\r\n                                                                                        'INR',\r\n                                                                        }\r\n                                                                )}\r\n                                                        </Col>\r\n                                                        </Row>\r\n                                                        </ListGroup.Item>\r\n                                                )\r\n                                                )}\r\n                                        </ListGroup>\r\n                                ) : (\r\n                                        <Spannings>No order</Spannings>\r\n                                )}\r\n                        </ListGroup.Item>\r\n                </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n                <Card>\r\n                <ListGroup variant='flush'>\r\n                <ListGroup.Item>\r\n                        <h2 className='text-center'>\r\n                                Order Summary\r\n                        </h2>\r\n                </ListGroup.Item>\r\n                {error && (\r\n                        <ListGroup.Item>\r\n                                <Spannings\r\n                                        dismissible\r\n                                        variant='danger'\r\n                                        duration={10}>\r\n                                        {error}\r\n                                </Spannings>\r\n                        </ListGroup.Item>\r\n                )}\r\n                <ListGroup.Item>\r\n                        <Row>\r\n                                <Col>\r\n                                        <strong>Subtotal</strong>\r\n                                </Col>\r\n                                <Col>\r\n                                        {order.itemsPrice.toLocaleString(\r\n                                                'en-IN',\r\n                                                {\r\n                                                        maximumFractionDigits: 2,\r\n                                                        style: 'currency',\r\n                                                        currency: 'INR',\r\n                                                }\r\n                                        )}\r\n                                </Col>\r\n                        </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                        <Row>\r\n                                <Col>\r\n                                        <strong>Shipping</strong>\r\n                                </Col>\r\n                                <Col>\r\n                                        {order.shippingPrice.toLocaleString(\r\n                                                'en-IN',\r\n                                                {\r\n                                                        maximumFractionDigits: 2,\r\n                                                        style: 'currency',\r\n                                                        currency: 'INR',\r\n                                                }\r\n                                        )}\r\n                                </Col>\r\n                        </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                        <Row>\r\n                                <Col>\r\n                                        <strong>Tax</strong>\r\n                                </Col>\r\n                                <Col>\r\n                                        {order.taxPrice.toLocaleString(\r\n                                                'en-IN',\r\n                                                {\r\n                                                        maximumFractionDigits: 2,\r\n                                                        style: 'currency',\r\n                                                        currency: 'INR',\r\n                                                }\r\n                                        )}\r\n                                </Col>\r\n                        </Row>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                        <Row>\r\n                                <Col>\r\n                                        <strong>Total</strong>\r\n                                </Col>\r\n                                <Col>\r\n                                        {order.totalPrice.toLocaleString(\r\n                                                'en-IN',\r\n                                                {\r\n                                                        maximumFractionDigits: 2,\r\n                                                        style: 'currency',\r\n                                                        currency: 'INR',\r\n                                                }\r\n                                        )}\r\n                                </Col>\r\n                        </Row>\r\n                </ListGroup.Item>\r\n                {/* show paypal button or the stripe checkout form */}\r\n                {errors ? <Message variant=\"danger\">{errors}</Message>:''}\r\n                {!order.isPaid && (\r\n                        <>\r\n                                {order.paymentMethod ===\r\n                                'Paypal' ? (\r\n                                        <ListGroup.Item>\r\n                                           {loadingPay && <Loading />}\r\n                                                  <PayPalScriptProvider options={{\"client-id\": process.env.REACT_APP_PAYPAL_CLIENT_ID,currency: \"USD\",intent: \"capture\",}} >\r\n                                                           <PayPalButtons style= {{\r\n                                                                                shape:  'pill',\r\n                                                                                height: 40,\r\n                                                                              //  label: 'pay',\r\n                                                                        }}\r\n                                                                 createOrder={(data, actions) => {\r\n                                                                      return actions.order.create({\r\n                                                                           purchase_units: [\r\n                                                                                 {\r\n                                                                                  amount: {\r\n                                                                                      value: Number(\r\n                                                                                            order.totalPrice /72\r\n                                                                                                ).toFixed(2),\r\n                                                                                                },\r\n                                                                                        },\r\n                                                                                    ],\r\n                                                                                    application_context: {\r\n                                                                                        shipping_preference: 'NO_SHIPPING',\r\n                                                                                      } //hiding shipping option from from\r\n                                                                                });\r\n                                                                            }}\r\n                                                                        \r\n                                                                        onApprove={(data, actions) => successPaymentHandler(data, actions)}\r\n                                                                        onError={err => setErrors(err.message)}\r\n                                                                />\r\n                                                        </PayPalScriptProvider>\r\n                                               \r\n                                        </ListGroup.Item>\r\n                                ) : (\r\n                                        <ListGroup.Item>\r\n                                                {loadingPay && <Loading />}\r\n                                                <Elements\r\n                                                        stripe={stripePromise}>\r\n                                                        {/* price in paisa */}\r\n                                                        <CheckoutForm\r\n                                                                price={order.totalPrice * 100}\r\n                                                                orderID={orderID} \r\n                                                                itemQWithIds = {itemQWithId}\r\n                                                        />\r\n                                                </Elements>\r\n                                        </ListGroup.Item>\r\n                                )}\r\n                        </>\r\n                )}\r\n                {/* show this only to admins, after payment is done */}\r\n                {userInfo &&\r\n                        userInfo.isAdmin &&\r\n                        order.isPaid &&\r\n                        !order.isDelivered && (\r\n                                <ListGroup.Item>\r\n                                        {loadingDeliver && <Loading />}\r\n                                        <div className='d-grid'>\r\n                                                <Button\r\n                                                        type='button'\r\n                                                        variant='info'\r\n                                                        size='lg'\r\n                                                        onClick={\r\n                                                                successDeliveryHandler\r\n                                                        }>\r\n                                                        Mark as Delivered\r\n                                                </Button>\r\n                                        </div>\r\n                                </ListGroup.Item>\r\n                )}\r\n                </ListGroup>\r\n                </Card>\r\n        </Col>\r\n        </>\r\n        )}\r\n   </Row>\r\n</>\r\n);\r\n};\r\n\r\nexport default Orderproduct;\r\n\r\nconst Spannings =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:13px;\r\nbackground-color:green;\r\n`\r\nconst Spannings2 =  styled(FormLabel)`\r\ncolor: white;\r\nfont-size:13px;\r\nbackground-color:red;\r\n`\r\n\r\n","import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { isUserLoggedIn } from '../utils/localStorage';\r\n\r\nconst PrivateRoute = ({ children }) => {\r\n // const navigate = useNavigate();\r\n  if (isUserLoggedIn()===false) {\r\n     //   alert(!isLoggedIn());\r\n    // user is not authenticated\r\n    return <Navigate to=\"/login\" />;\r\n   \r\n  }\r\n  return children;\r\n};\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { isUserLoggedIn } from '../utils/localStorage';\r\n\r\nconst PublicRoutes = ({ children }) => {\r\n // const navigate = useNavigate();\r\n  if (!isUserLoggedIn) {\r\n    // user is not authenticated\r\n    //return children;\r\n    return <Navigate reloadDocument to=\"/login\" />;\r\n  }\r\n  return children;\r\n};\r\n\r\nexport default PublicRoutes;","import React from \"react\";\nimport Navbar from \"./components/navbar/Navbar\";\n//auth user\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport Profile from \"./components/auth/Profile\";\nimport Logout from \"./components/auth/Logout\";\nimport Allusers from \"./components/auth/Allusers\";\nimport Confirmuser from \"./components/auth/Confirmuser\";\nimport Useredit from \"./components/auth/Useredit\";\n//customers created by auth user\n//import Customer from \"./components/customer/Customer\";\n//product components for admin user\nimport Createproducts from './components/products/Createproducts';\nimport Listproducts from './components/products/Listproducts';\nimport Home from \"./components/Home\";\nimport Modals from \"./components/Modals\";\n\n//product components for normal users\nimport Productlisting from \"./components/cart/Productlisting\";\nimport Producttocarts from \"./components/cart/Producttocarts\";\nimport Cartpage from './components/cart/Cartpage';\nimport Shipping from './components/cart/Shipping';\nimport Payment from './components/cart/Payment';\nimport Placeorder from './components/cart/Placeorder';\nimport Orderlistpage from './components/cart/Orderlistpage';\n//\nimport Orderproduct from './components/cart/Orderproduct';\n\nimport PrivateRoute from './routes/PrivateRoute';\nimport PublicRoute from './routes/PublicRoute';\nimport { BrowserRouter as Router,Routes,Route } from 'react-router-dom';\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n          <Routes>\n              <Route exact path=\"/\" element={<Productlisting />} />\n              <Route path=\"/home\" element={<PrivateRoute><Home /></PrivateRoute>} />\n              <Route path=\"/users\" element={<PrivateRoute><Allusers /></PrivateRoute>} /> \n              <Route path=\"/login\" element={<PublicRoute><Login /></PublicRoute>} />\n              <Route path=\"/logout\" element={<PrivateRoute><Logout /></PrivateRoute>} />\n              <Route path=\"/sign-up\" element={<PublicRoute><Signup /></PublicRoute>} />\n              <Route path=\"/user-profile/:id\" element={<PrivateRoute><Profile /></PrivateRoute>} />\n              <Route path=\"/userEditFromAdminId/:id\" element={<PrivateRoute><Useredit /></PrivateRoute>} />\n              <Route path=\"/createproduct\" element={<PrivateRoute><Createproducts /></PrivateRoute>} />\n              <Route path=\"/listproduct\" element={<PrivateRoute><Listproducts /></PrivateRoute>} />\n              <Route path=\"/producttocart/:id\" element={<Producttocarts />} />\n              <Route path=\"/cart/:id\" element={<Cartpage />} />\n              <Route path=\"/placeorder\" element={<PrivateRoute><Placeorder /></PrivateRoute>} />\n              <Route path=\"/payment\" element={<PrivateRoute><Payment /></PrivateRoute>} />\n              <Route path=\"/home\" element={<PrivateRoute><Productlisting /></PrivateRoute>} />\n              <Route path=\"/shipping\" element={<PrivateRoute><Shipping /></PrivateRoute>} />\n              <Route path='/order/:id' element={<PrivateRoute><Orderproduct /></PrivateRoute>} />\n              <Route path='/orderpage' element={<PrivateRoute><Orderlistpage /></PrivateRoute>} />\n              <Route path='/modal' element={<PrivateRoute><Modals /></PrivateRoute>} />\n              <Route path='/user/confirm/:token' element={<Confirmuser />} />\n          </Routes>\n          <ToastContainer\n                  position=\"bottom-right\"\n                  autoClose={3000}\n                  hideProgressBar={false}\n                  newestOnTop={false}\n                  closeOnClick\n                  rtl={false}\n                  pauseOnFocusLoss\n                  draggable\n                  pauseOnHover\n                  theme=\"colored\"\n          />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore,combineReducers,applyMiddleware/*,compose*/} from 'redux';  // configureStore will be used to create store. combineReducers will be used for combining all reducers, applyMiddlware will be used with redux-thunk to apply thunk middlewares if needs.\r\nimport thunk from 'redux-thunk';  // if after getting dispatch from action if  it returns function thunk will apply ascynchronously some logic as middleware then give it to reducer.\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport {\r\n        userLoginReducer,\r\n        userRegisterReducer,\r\n        userUpdateProfileReducer,\r\n        editUserFromAdminReducer,\r\n        userAllReducer,\r\n        userSearchReducer,\r\n        userDeleteReducer,\r\n        userGetDetailsReducer,\r\n        userConfirmReducer\r\n} from './reducers/authReducers';  // imporeting auth user reducers\r\nimport {\r\n        createProductReducer,\r\n        listProductReducer,\r\n        /*,\r\n        productListReducer*/\r\n} from './reducers/productReducers'; //import reducers for product\r\nimport {\r\n        productListingsCartReducer,\r\n        productToCartReducer,\r\n        cartPageReducer,\r\n        cartReducer/*,\r\n        orderPageReducer*/\r\n} from './reducers/cartReducers'; //import reducers for cart\r\nimport {\r\n\torderCreateReducer,\r\n\torderDetailsReducer,\r\n\torderPayReducer,\r\n\torderDeliverReducer,\r\n\torderListAllReducer,\r\n        orderListMyReducer\r\n} from './reducers/orderReducers';\r\nconst reducer = combineReducers({\r\n        userLogin: userLoginReducer,\r\n        userRegister: userRegisterReducer,\r\n        userUpdateProfile: userUpdateProfileReducer,\r\n        editUserFromAdmin:editUserFromAdminReducer,\r\n        userAll:userAllReducer,\r\n        userSearch:userSearchReducer,\r\n        userDelete:userDeleteReducer,\r\n        userDetails:userGetDetailsReducer,\r\n        userConfirm:userConfirmReducer,\r\n        createProduct:createProductReducer,\r\n        listProduct:listProductReducer,\r\n        cart:cartReducer,\r\n     //   productList:productListReducer,\r\n        productListingsCart:productListingsCartReducer,\r\n        productToCart:productToCartReducer,\r\n        cartPage:cartPageReducer,\r\n        orderCreate: orderCreateReducer,\r\n\torderDetails: orderDetailsReducer,\r\n\torderPay: orderPayReducer,\r\n\torderDeliver: orderDeliverReducer,\r\n\torderListAll: orderListAllReducer,\r\n        orderListMy:orderListMyReducer\r\n});\r\n\r\nconst userInfoFromStorage = localStorage.getItem(\"userInfo\") ? JSON.parse(localStorage.getItem(\"userInfo\")) :\"\";\r\nconst cartInfoFromStorage = localStorage.getItem(\"cartInfo\") ? JSON.parse(localStorage.getItem(\"cartInfo\")) :\"\";\r\n// get the shipping address from local storage\r\nconst shippingAddressFromLocalStorage = localStorage.getItem('shippingAddress')\r\n\t? JSON.parse(localStorage.getItem('shippingAddress'))\r\n\t: {};\r\n\r\nconst initialState = {\r\n        userLogin : {userInfo: userInfoFromStorage},\r\n        cart : {cartInfo: [...cartInfoFromStorage],\r\n\t\tshippingAddress: shippingAddressFromLocalStorage}\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(reducer,initialState,composeWithDevTools(applyMiddleware(...middleware)));//this is also correct\r\n//const store = createStore(reducer,initialState,composeWithDevTools(applyMiddleware(thunk))); // this is also correct\r\n\r\nexport default store;\r\n","import {\r\n        USER_LOGIN_FAIL,\r\n        USER_LOGIN_REQUEST,\r\n        USER_LOGIN_SUCCESS,\r\n        USER_LOGOUT,\r\n        USER_REGISTER_FAIL,\r\n        USER_REGISTER_REQUEST,\r\n        USER_REGISTER_SUCCESS,\r\n        USER_UPDATE_FAIL,\r\n        USER_UPDATE_REQUEST,\r\n        USER_UPDATE_SUCCESS,\r\n        USER_ALL_FAIL,\r\n        USER_ALL_REQUEST,\r\n        USER_ALL_SUCCESS,  \r\n        EDIT_USER_FROM_ADMIN_FAIL,\r\n        EDIT_USER_FROM_ADMIN_REQUEST,\r\n        EDIT_USER_FROM_ADMIN_SUCCESS,        \r\n        USER_GETUSERBYSEARCH_REQUEST,\r\n        USER_GETUSERBYSEARCH_SUCCESS,\r\n        USER_GETUSERBYSEARCH_FAIL,\r\n        USER_DELETE_FAIL,\r\n        USER_DELETE_REQUEST,\r\n        USER_DELETE_SUCCESS,\r\n        USER_GET_DETAILS_REQUEST,    \r\n        USER_GET_DETAILS_SUCCESS, \r\n        USER_GET_DETAILS_FAIL,\r\n        USER_CONFIRM_REQUEST,\r\n        USER_CONFIRM_SUCCESS,\r\n        USER_CONFIRM_FAIL               \r\n      } from \"../actionTypes/authConstants\";\r\n\r\nexport const userLoginReducer = (state= {}, action) => {\r\n        switch(action.type) {\r\n                case USER_LOGIN_REQUEST: return { loading:true };\r\n                case USER_LOGIN_SUCCESS: return { loading:false, userInfo: action.payload };\r\n                case USER_LOGIN_FAIL: return { loading:false, error: action.payload };\r\n                case USER_LOGOUT: return {};\r\n                default: return state;\r\n        }\r\n}\r\nexport const userRegisterReducer = (state= {}, action) => {\r\n        switch(action.type) {\r\n                case USER_REGISTER_REQUEST: return { loading:true };\r\n                case USER_REGISTER_SUCCESS: return { loading:false, userInfo: action.payload };\r\n                case USER_REGISTER_FAIL: return { loading:false, error: action.payload };\r\n                default: return  state;\r\n        }\r\n}\r\nexport const userUpdateProfileReducer = (state= {}, action) => {\r\n        switch(action.type) {\r\n                case USER_UPDATE_REQUEST: return { loading:true };\r\n                case USER_UPDATE_SUCCESS: return { loading:false, userInfo: action.payload,success:true };\r\n                case USER_UPDATE_FAIL: return { loading:false, error: action.payload,success:false };\r\n                default: return state;\r\n        }\r\n}\r\nexport const editUserFromAdminReducer = (state= {}, action) => {\r\n        switch(action.type) {\r\n                case EDIT_USER_FROM_ADMIN_REQUEST: return { loading:true };\r\n                case EDIT_USER_FROM_ADMIN_SUCCESS: return { loading:false, userInfo: action.payload,success:true };\r\n                case EDIT_USER_FROM_ADMIN_FAIL: return { loading:false, error: action.payload,success:false };\r\n                default: return state;\r\n        }\r\n}\r\nexport const userAllReducer = (state= {}, action) => {\r\n        switch(action.type) {\r\n                case USER_ALL_REQUEST: return { loading:true };\r\n                case USER_ALL_SUCCESS: return { loading:false, userInfo: action.payload,success:true };\r\n                case USER_ALL_FAIL: return { loading:false, error: action.payload,success:false };\r\n                default: return state;\r\n        }\r\n}\r\nexport const userSearchReducer = (state = {}, action) =>{\r\n        switch (action.type) {\r\n                case USER_GETUSERBYSEARCH_REQUEST:\r\n                        return { loading: true };\r\n                case USER_GETUSERBYSEARCH_SUCCESS:\r\n                        return { loading: false, userInfoBySearch: action.payload };\r\n                case USER_GETUSERBYSEARCH_FAIL:\r\n                        return { loading: false, error: action.payload };\r\n                default:\r\n                        return state;\r\n        }         \r\n}\r\nexport const userDeleteReducer = (state = {}, action) =>{\r\n        switch (action.type) {\r\n                case USER_DELETE_REQUEST:\r\n                        return { loading: true };\r\n                case USER_DELETE_SUCCESS:\r\n                        return { loading: false, userInfo: action.payload };\r\n                case USER_DELETE_FAIL:\r\n                        return { loading: false, error: action.payload };\r\n                default:\r\n                        return state;\r\n        }         \r\n}\r\nexport const userGetDetailsReducer = (state = {}, action) =>{\r\n        switch (action.type) {\r\n                case USER_GET_DETAILS_REQUEST:\r\n                        return { loading: true };\r\n                case USER_GET_DETAILS_SUCCESS:\r\n                        return { loading: false, userInfoById: action.payload,profile:false };\r\n                case USER_GET_DETAILS_FAIL:\r\n                        return { loading: false, error: action.payload };\r\n                default:\r\n                        return state;\r\n        }         \r\n}\r\nexport const userConfirmReducer = (state = {}, action) =>{\r\n        switch (action.type) {\r\n                case USER_CONFIRM_REQUEST:\r\n                        return { loading: true };\r\n                case USER_CONFIRM_SUCCESS:\r\n                        return { loading: false, isConfirmed: action.payload };\r\n                case USER_CONFIRM_FAIL:\r\n                        return { loading: false, error: action.payload };\r\n                default:\r\n                        return state;\r\n        }         \r\n}    \r\n","import {\r\n        PRODUCT_CREATE_REQEUST,\r\n        PRODUCT_CREATE_SUCCESS,\r\n        PRODUCT_CREATE_FAIL,\r\n        PRODUCT_LIST_REQEUST,\r\n        PRODUCT_LIST_SUCCESS,\r\n        PRODUCT_LIST_FAIL   \r\n} from '../actionTypes/productConstants';\r\n\r\nexport const createProductReducer = (state = {},action) => {\r\n        switch(action.type){\r\n                case PRODUCT_CREATE_REQEUST: return {loading:true};\r\n                case PRODUCT_CREATE_SUCCESS: return {loading:false, productInfo:action.payload};\r\n                case PRODUCT_CREATE_FAIL: return {loading:false, error:action.payload}\r\n                default : return state;\r\n        }\r\n}\r\nexport const listProductReducer = (state={},action) => {\r\n        switch(action.type) {\r\n                case PRODUCT_LIST_REQEUST: return {loading:true};\r\n                case PRODUCT_LIST_SUCCESS: return {loading:false, productInfo:action.payload};\r\n                case PRODUCT_LIST_FAIL: return {loading:false, error:action.payload}\r\n                default : return state;\r\n\r\n        }\r\n}\r\nexport const productListReducer = (state={},action) => {\r\n        switch(action.type) {\r\n                case PRODUCT_LIST_REQEUST: return {loading:true};\r\n                case PRODUCT_LIST_SUCCESS: return {loading:false, productInfo:action.payload};\r\n                case PRODUCT_LIST_FAIL: return {loading:false, error:action.payload}\r\n                default : return state;\r\n\r\n        }\r\n}","import {\r\n        CART_LIST_FAIL,\r\n        CART_LIST_REQEUST,\r\n        CART_LIST_SUCCESS,\r\n        CART_PORDUCTTO_CART_REQEUST,\r\n        CART_PORDUCTTO_CART_SUCCESS,\r\n        CART_PORDUCTTO_CART_FAIL,\r\n        CART_PAGE_REQEUST,\r\n        CART_PAGE_SUCCESS,\r\n        CART_PAGE_FAIL,\r\n\r\n        CART_ADD_ITEM,\r\n\tCART_REMOVE_ITEM,\r\n\tCART_SAVE_SHIPPING_ADDRESS,\r\n\tCART_SAVE_PAYMENT_METHOD,\r\n\tCART_RESET\r\n      } from \"../actionTypes/cartConstants\";\r\nexport const productListingsCartReducer = (state = {cartInfo:[]},action) => {\r\n        switch(action.type){\r\n                case CART_LIST_REQEUST: return {loading:true};\r\n                case CART_LIST_SUCCESS: return {loading:false, cartInfo:action.payload};\r\n                case CART_LIST_FAIL: return {loading:false, error:action.payload}\r\n                default : return { ...state };\r\n        }\r\n}\r\nexport const productToCartReducer = (state = {},action) => {\r\n         \r\n        switch(action.type){\r\n                case CART_PORDUCTTO_CART_REQEUST: return {loading:true};\r\n                case CART_PORDUCTTO_CART_SUCCESS: return {loading:false, cartInfo:[action.payload]};\r\n                case CART_PORDUCTTO_CART_FAIL: return {loading:false, error:action.payload}\r\n                default : return { ...state };\r\n        }\r\n}\r\nexport const cartPageReducer = (state = {},action) => {\r\n        switch(action.type){\r\n                case CART_PAGE_REQEUST: return {loading:true};\r\n                case CART_PAGE_SUCCESS: return {loading:false, cartInfo:action.payload};\r\n                case CART_PAGE_FAIL: return {loading:false, error:action.payload}\r\n                default : return state;\r\n        }\r\n}\r\n/*export const orderPageReducer = (state = {},action) => {\r\n        switch(action.type){\r\n                case CART_LIST_REQEUST: return {loading:true};\r\n                case CART_LIST_SUCCESS: return {loading:false, cartInfo:action.payload};\r\n                case CART_LIST_FAIL: return {loading:false, error:action.payload}\r\n                default : return state;\r\n        }\r\n}*/\r\nexport const cartReducer = (\r\n\tstate = { cartInfo: [], shippingAddress: {} },\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase CART_ADD_ITEM:\r\n\t\t\tconst item = action.payload;\r\n\t\t\r\n\t\t\t// check if the item exists in the cart\r\n\t\t\tconst existingItem = state.cartInfo.find(\r\n\t\t\t\t(ele) => ele._id === item._id\r\n\t\t\t);\r\n\t\t\tif (existingItem) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcartInfo: state.cartInfo.map((ele) =>\r\n\t\t\t\t\t\tele._id === existingItem._id ? item : ele\r\n\t\t\t\t\t),\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcartInfo: [...state.cartInfo, item],\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\tcase CART_REMOVE_ITEM:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcartInfo: state.cartInfo.filter(\r\n\t\t\t\t\t(ele) => ele._id !== action.payload\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\tcase CART_SAVE_SHIPPING_ADDRESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tshippingAddress: action.payload,\r\n\t\t\t};\r\n\t\tcase CART_SAVE_PAYMENT_METHOD:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpaymentMethod: action.payload,\r\n\t\t\t};\r\n\t\tcase CART_RESET: {\r\n\t\t\treturn {\r\n\t\t\t\tcartInfo: [],\r\n\t\t\t\tshippingAddress: action.payload,\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n\r\n","import {\r\n\tORDER_CREATE_REQUEST,\r\n\tORDER_CREATE_SUCCESS,\r\n\tORDER_CREATE_FAIL,\r\n\tORDER_CREATE_RESET,\r\n\tORDER_DETAILS_REQUEST,\r\n\tORDER_DETAILS_SUCCESS,\r\n\tORDER_DETAILS_FAIL,\r\n\tORDER_PAY_REQUEST,\r\n\tORDER_PAY_SUCCESS,\r\n\tORDER_PAY_FAIL,\r\n\tORDER_PAY_RESET,\r\n\tORDER_DELIVER_REQUEST,\r\n\tORDER_DELIVER_SUCCESS,\r\n\tORDER_DELIVER_FAIL,\r\n\tORDER_DELIVER_RESET,\r\n\tORDER_ALL_LIST_REQUEST,\r\n\tORDER_ALL_LIST_SUCCESS,\r\n\tORDER_ALL_LIST_FAIL,\r\n\tORDER_MY_LIST_REQUEST,\r\n\tORDER_MY_LIST_SUCCESS,\r\n\tORDER_MY_LIST_FAIL,\r\n\tORDER_MY_LIST_RESET\r\n\t\r\n} from '../actionTypes/orderConstants';\r\n\r\n// create an order\r\nexport const orderCreateReducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ORDER_CREATE_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase ORDER_CREATE_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tsuccess: true,\r\n\t\t\t\torder: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_CREATE_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_CREATE_RESET:\r\n\t\t\treturn {};\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n\r\n// get order details\r\nexport const orderDetailsReducer = (\r\n\tstate = { loading: true, orderItems: [], shippingAddress: {} },\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase ORDER_DETAILS_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase ORDER_DETAILS_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\torder: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_DETAILS_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n\r\n// update order payment options\r\nexport const orderPayReducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ORDER_PAY_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase ORDER_PAY_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tsuccess: true,\r\n\t\t\t};\r\n\t\tcase ORDER_PAY_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_PAY_RESET:\r\n\t\t\treturn {};\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n\r\n// update order to be delivered or not\r\nexport const orderDeliverReducer = (state = {}, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ORDER_DELIVER_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase ORDER_DELIVER_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\tsuccess: true,\r\n\t\t\t};\r\n\t\tcase ORDER_DELIVER_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_DELIVER_RESET:\r\n\t\t\treturn {};\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n\r\n// reducer to list orders of the particular user\r\nexport const orderListMyReducer = (state = { orders: [] }, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ORDER_MY_LIST_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase ORDER_MY_LIST_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\torders: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_MY_LIST_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\t\tcase ORDER_MY_LIST_RESET:\r\n\t\t\treturn { orders: [] };\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n\r\n// reducer to list all orders for the admin panel view\r\nexport const orderListAllReducer = (state = { orders: [] }, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ORDER_ALL_LIST_REQUEST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\tcase ORDER_ALL_LIST_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\torders: action.payload,success:true\r\n\t\t\t};\r\n\t\tcase ORDER_ALL_LIST_FAIL:\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: action.payload,\r\n\t\t\t};\r\n\r\n\t\tdefault:\r\n\t\t\treturn { ...state };\r\n\t}\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store= {store}>\n      <App />\n    </Provider>    \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}